-- Project:   BoxesBLE
-- Generated: 04/25/2015 20:09:30
-- PSoC Creator  3.1 SP2

ENTITY BoxesBLE IS
    PORT(
        LED(0)_PAD : OUT std_ulogic;
        Pin_1(0)_PAD : IN std_ulogic);
    ATTRIBUTE voltage_VDDACTB OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDA1 OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDIO_1 OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDIO_0 OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDD0 OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDIO_2 OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDR_HLS OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDR_BGLS OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDR_SYN OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDR_LF OF __DEFAULT__ : ENTITY IS 3.3e0;
    ATTRIBUTE voltage_VDDR_HF OF __DEFAULT__ : ENTITY IS 3.3e0;
END BoxesBLE;

ARCHITECTURE __DEFAULT__ OF BoxesBLE IS
    SIGNAL ClockBlock_ECO : bit;
    SIGNAL ClockBlock_EXTCLK : bit;
    SIGNAL ClockBlock_HFCLK : bit;
    ATTRIBUTE global_signal OF ClockBlock_HFCLK : SIGNAL IS true;
    SIGNAL ClockBlock_ILO : bit;
    SIGNAL ClockBlock_IMO : bit;
    SIGNAL ClockBlock_LFCLK : bit;
    SIGNAL ClockBlock_Routed1 : bit;
    SIGNAL ClockBlock_SYSCLK : bit;
    SIGNAL ClockBlock_WCO : bit;
    SIGNAL LED(0)__PA : bit;
    SIGNAL Net_211 : bit;
    SIGNAL Net_220 : bit;
    SIGNAL Pin_1(0)__PA : bit;
    SIGNAL \UART_1:BUART:HalfDuplexSend_last\ : bit;
    SIGNAL \UART_1:BUART:control_0\ : bit;
    SIGNAL \UART_1:BUART:control_1\ : bit;
    SIGNAL \UART_1:BUART:control_2\ : bit;
    SIGNAL \UART_1:BUART:control_3\ : bit;
    SIGNAL \UART_1:BUART:control_4\ : bit;
    SIGNAL \UART_1:BUART:control_5\ : bit;
    SIGNAL \UART_1:BUART:control_6\ : bit;
    SIGNAL \UART_1:BUART:control_7\ : bit;
    SIGNAL \UART_1:BUART:hd_shift_out\ : bit;
    SIGNAL \UART_1:BUART:hd_tx_fifo_empty\ : bit;
    SIGNAL \UART_1:BUART:hd_tx_fifo_notfull\ : bit;
    SIGNAL \UART_1:BUART:pollcount_0\ : bit;
    SIGNAL \UART_1:BUART:pollcount_1\ : bit;
    SIGNAL \UART_1:BUART:reset_sr\ : bit;
    SIGNAL \UART_1:BUART:rx_bitclk\ : bit;
    SIGNAL \UART_1:BUART:rx_bitclk_enable\ : bit;
    SIGNAL \UART_1:BUART:rx_count7_tc\ : bit;
    SIGNAL \UART_1:BUART:rx_count_0\ : bit;
    SIGNAL \UART_1:BUART:rx_count_1\ : bit;
    SIGNAL \UART_1:BUART:rx_count_2\ : bit;
    SIGNAL \UART_1:BUART:rx_count_3\ : bit;
    SIGNAL \UART_1:BUART:rx_count_4\ : bit;
    SIGNAL \UART_1:BUART:rx_count_5\ : bit;
    SIGNAL \UART_1:BUART:rx_count_6\ : bit;
    SIGNAL \UART_1:BUART:rx_counter_load\ : bit;
    SIGNAL \UART_1:BUART:rx_fifofull\ : bit;
    SIGNAL \UART_1:BUART:rx_fifonotempty\ : bit;
    SIGNAL \UART_1:BUART:rx_last\ : bit;
    SIGNAL \UART_1:BUART:rx_load_fifo\ : bit;
    SIGNAL \UART_1:BUART:rx_postpoll\ : bit;
    SIGNAL \UART_1:BUART:rx_state_0\ : bit;
    SIGNAL \UART_1:BUART:rx_state_1\ : bit;
    SIGNAL \UART_1:BUART:rx_state_2\ : bit;
    SIGNAL \UART_1:BUART:rx_state_2_split\ : bit;
    SIGNAL \UART_1:BUART:rx_state_3\ : bit;
    SIGNAL \UART_1:BUART:rx_state_stop1_reg\ : bit;
    SIGNAL \UART_1:BUART:rx_status_0\ : bit;
    SIGNAL \UART_1:BUART:rx_status_1\ : bit;
    SIGNAL \UART_1:BUART:rx_status_3\ : bit;
    SIGNAL \UART_1:BUART:rx_status_4\ : bit;
    SIGNAL \UART_1:BUART:rx_status_5\ : bit;
    SIGNAL \UART_1:BUART:txn\ : bit;
    SIGNAL \UART_1:BUART:txn_split\ : bit;
    SIGNAL \UART_1:Net_9_digital\ : bit;
    ATTRIBUTE udbclken_assigned OF \UART_1:Net_9_digital\ : SIGNAL IS "True";
    ATTRIBUTE global_signal OF \UART_1:Net_9_digital\ : SIGNAL IS true;
    SIGNAL __ONE__ : bit;
    ATTRIBUTE POWER OF __ONE__ : SIGNAL IS true;
    SIGNAL __ZERO__ : bit;
    ATTRIBUTE GROUND OF __ZERO__ : SIGNAL IS true;
    SIGNAL dclk_to_genclk : bit;
    SIGNAL tmpOE__LED_net_0 : bit;
    ATTRIBUTE POWER OF tmpOE__LED_net_0 : SIGNAL IS true;
    SIGNAL zero : bit;
    ATTRIBUTE GROUND OF zero : SIGNAL IS true;
    ATTRIBUTE Location OF ClockGenBlock : LABEL IS "F(CLK_GEN,0)";
    ATTRIBUTE lib_model OF LED(0) : LABEL IS "iocell1";
    ATTRIBUTE lib_model OF Pin_1(0) : LABEL IS "iocell2";
    ATTRIBUTE lib_model OF \UART_1:BUART:HalfDuplexSend_last\ : LABEL IS "macrocell1";
    ATTRIBUTE lib_model OF \UART_1:BUART:pollcount_0\ : LABEL IS "macrocell2";
    ATTRIBUTE lib_model OF \UART_1:BUART:pollcount_1\ : LABEL IS "macrocell3";
    ATTRIBUTE lib_model OF \UART_1:BUART:reset_sr\ : LABEL IS "macrocell4";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_bitclk\ : LABEL IS "macrocell5";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_bitclk_enable\ : LABEL IS "macrocell6";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_counter_load\ : LABEL IS "macrocell7";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_last\ : LABEL IS "macrocell8";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_load_fifo\ : LABEL IS "macrocell9";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_postpoll\ : LABEL IS "macrocell10";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_0\ : LABEL IS "macrocell11";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_1\ : LABEL IS "macrocell12";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_2\ : LABEL IS "macrocell13";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_2_split\ : LABEL IS "macrocell14";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_3\ : LABEL IS "macrocell15";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_state_stop1_reg\ : LABEL IS "macrocell16";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_status_0\ : LABEL IS "macrocell17";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_status_1\ : LABEL IS "macrocell18";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_status_3\ : LABEL IS "macrocell19";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_status_4\ : LABEL IS "macrocell20";
    ATTRIBUTE lib_model OF \UART_1:BUART:rx_status_5\ : LABEL IS "macrocell21";
    ATTRIBUTE lib_model OF \UART_1:BUART:sCR_SyncCtl:CtrlReg\ : LABEL IS "controlcell1";
    ATTRIBUTE lib_model OF \UART_1:BUART:sRX:RxShifter:u0\ : LABEL IS "datapathcell1";
    ATTRIBUTE lib_model OF \UART_1:BUART:sRX:RxSts\ : LABEL IS "statusicell1";
    ATTRIBUTE lib_model OF \UART_1:BUART:txn\ : LABEL IS "macrocell22";
    ATTRIBUTE lib_model OF \UART_1:BUART:txn_split\ : LABEL IS "macrocell23";
    COMPONENT controlcell
        PORT (
            control_0 : OUT std_ulogic;
            control_1 : OUT std_ulogic;
            control_2 : OUT std_ulogic;
            control_3 : OUT std_ulogic;
            control_4 : OUT std_ulogic;
            control_5 : OUT std_ulogic;
            control_6 : OUT std_ulogic;
            control_7 : OUT std_ulogic;
            clock : IN std_ulogic;
            reset : IN std_ulogic;
            clk_en : IN std_ulogic;
            busclk : IN std_ulogic);
    END COMPONENT;
    ATTRIBUTE udb_clk OF controlcell : COMPONENT IS "clock";
    ATTRIBUTE udb_clken OF controlcell : COMPONENT IS "clk_en";
    ATTRIBUTE udb_reset OF controlcell : COMPONENT IS "reset";
    COMPONENT count7cell
        PORT (
            clock : IN std_ulogic;
            reset : IN std_ulogic;
            load : IN std_ulogic;
            enable : IN std_ulogic;
            clk_en : IN std_ulogic;
            count_0 : OUT std_ulogic;
            count_1 : OUT std_ulogic;
            count_2 : OUT std_ulogic;
            count_3 : OUT std_ulogic;
            count_4 : OUT std_ulogic;
            count_5 : OUT std_ulogic;
            count_6 : OUT std_ulogic;
            tc : OUT std_ulogic;
            clock_n : IN std_ulogic;
            extclk : IN std_ulogic;
            extclk_n : IN std_ulogic);
    END COMPONENT;
    ATTRIBUTE udb_clk OF count7cell : COMPONENT IS "clock,clock_n,extclk,extclk_n";
    ATTRIBUTE udb_clken OF count7cell : COMPONENT IS "clk_en";
    ATTRIBUTE udb_reset OF count7cell : COMPONENT IS "reset";
    COMPONENT datapathcell
        PORT (
            clock : IN std_ulogic;
            clk_en : IN std_ulogic;
            reset : IN std_ulogic;
            cs_addr_0 : IN std_ulogic;
            cs_addr_1 : IN std_ulogic;
            cs_addr_2 : IN std_ulogic;
            route_si : IN std_ulogic;
            route_ci : IN std_ulogic;
            f0_load : IN std_ulogic;
            f1_load : IN std_ulogic;
            d0_load : IN std_ulogic;
            d1_load : IN std_ulogic;
            ce0_reg : OUT std_ulogic;
            cl0_reg : OUT std_ulogic;
            z0_reg : OUT std_ulogic;
            f0_reg : OUT std_ulogic;
            ce1_reg : OUT std_ulogic;
            cl1_reg : OUT std_ulogic;
            z1_reg : OUT std_ulogic;
            f1_reg : OUT std_ulogic;
            ov_msb_reg : OUT std_ulogic;
            co_msb_reg : OUT std_ulogic;
            cmsb_reg : OUT std_ulogic;
            so_reg : OUT std_ulogic;
            f0_bus_stat_reg : OUT std_ulogic;
            f0_blk_stat_reg : OUT std_ulogic;
            f1_bus_stat_reg : OUT std_ulogic;
            f1_blk_stat_reg : OUT std_ulogic;
            ce0_comb : OUT std_ulogic;
            cl0_comb : OUT std_ulogic;
            z0_comb : OUT std_ulogic;
            f0_comb : OUT std_ulogic;
            ce1_comb : OUT std_ulogic;
            cl1_comb : OUT std_ulogic;
            z1_comb : OUT std_ulogic;
            f1_comb : OUT std_ulogic;
            ov_msb_comb : OUT std_ulogic;
            co_msb_comb : OUT std_ulogic;
            cmsb_comb : OUT std_ulogic;
            so_comb : OUT std_ulogic;
            f0_bus_stat_comb : OUT std_ulogic;
            f0_blk_stat_comb : OUT std_ulogic;
            f1_bus_stat_comb : OUT std_ulogic;
            f1_blk_stat_comb : OUT std_ulogic;
            ce0 : OUT std_ulogic;
            ce0i : IN std_ulogic;
            p_in_0 : IN std_ulogic;
            p_in_1 : IN std_ulogic;
            p_in_2 : IN std_ulogic;
            p_in_3 : IN std_ulogic;
            p_in_4 : IN std_ulogic;
            p_in_5 : IN std_ulogic;
            p_in_6 : IN std_ulogic;
            p_in_7 : IN std_ulogic;
            p_out_0 : OUT std_ulogic;
            p_out_1 : OUT std_ulogic;
            p_out_2 : OUT std_ulogic;
            p_out_3 : OUT std_ulogic;
            p_out_4 : OUT std_ulogic;
            p_out_5 : OUT std_ulogic;
            p_out_6 : OUT std_ulogic;
            p_out_7 : OUT std_ulogic;
            cl0i : IN std_ulogic;
            cl0 : OUT std_ulogic;
            z0i : IN std_ulogic;
            z0 : OUT std_ulogic;
            ff0i : IN std_ulogic;
            ff0 : OUT std_ulogic;
            ce1i : IN std_ulogic;
            ce1 : OUT std_ulogic;
            cl1i : IN std_ulogic;
            cl1 : OUT std_ulogic;
            z1i : IN std_ulogic;
            z1 : OUT std_ulogic;
            ff1i : IN std_ulogic;
            ff1 : OUT std_ulogic;
            cap0i : IN std_ulogic;
            cap0 : OUT std_ulogic;
            cap1i : IN std_ulogic;
            cap1 : OUT std_ulogic;
            ci : IN std_ulogic;
            co_msb : OUT std_ulogic;
            sir : IN std_ulogic;
            sol_msb : OUT std_ulogic;
            cfbi : IN std_ulogic;
            cfbo : OUT std_ulogic;
            sil : IN std_ulogic;
            sor : OUT std_ulogic;
            cmsbi : IN std_ulogic;
            cmsbo : OUT std_ulogic;
            busclk : IN std_ulogic);
    END COMPONENT;
    ATTRIBUTE udb_clk OF datapathcell : COMPONENT IS "clock";
    ATTRIBUTE udb_clken OF datapathcell : COMPONENT IS "clk_en";
    ATTRIBUTE udb_reset OF datapathcell : COMPONENT IS "reset";
    ATTRIBUTE udb_chain OF datapathcell : COMPONENT IS "ce0i,ce0,cl0i,cl0,z0i,z0,ff0i,ff0,ce1i,ce1,cl1i,cl1,z1i,z1,ff1i,ff1,cap0i,cap0,cap1i,cap1,ci,co_msb,sir,sol_msb,cfbi,cfbo,sil,sor,cmsbi,cmsbo";
    ATTRIBUTE chain_lsb OF datapathcell : COMPONENT IS "ce0i,cl0i,z0i,ff0i,ce1i,cl1i,z1i,ff1i,cap0i,cap1i,ci,sir,cfbi,sor,cmsbo";
    ATTRIBUTE chain_msb OF datapathcell : COMPONENT IS "ce0,cl0,z0,ff0,ce1,cl1,z1,ff1,cap0,cap1,co_msb,sol_msb,cfbo,sil,cmsbi";
    COMPONENT interrupt
        PORT (
            interrupt : IN std_ulogic;
            clock : IN std_ulogic);
    END COMPONENT;
    COMPONENT iocell
        PORT (
            pin_input : IN std_ulogic;
            oe : IN std_ulogic;
            fb : OUT std_ulogic;
            pad_in : IN std_ulogic;
            pa_out : OUT std_ulogic;
            pad_out : OUT std_ulogic;
            oe_reg : OUT std_ulogic;
            oe_internal : IN std_ulogic;
            in_clock : IN std_ulogic;
            in_clock_en : IN std_ulogic;
            in_reset : IN std_ulogic;
            out_clock : IN std_ulogic;
            out_clock_en : IN std_ulogic;
            out_reset : IN std_ulogic);
    END COMPONENT;
    COMPONENT logicalport
        PORT (
            interrupt : OUT std_ulogic;
            precharge : IN std_ulogic;
            in_clock : IN std_ulogic;
            in_clock_en : IN std_ulogic;
            in_reset : IN std_ulogic;
            out_clock : IN std_ulogic;
            out_clock_en : IN std_ulogic;
            out_reset : IN std_ulogic);
    END COMPONENT;
    COMPONENT m0s8clockblockcell
        PORT (
            imo : OUT std_ulogic;
            ext : OUT std_ulogic;
            eco : OUT std_ulogic;
            ilo : OUT std_ulogic;
            wco : OUT std_ulogic;
            dbl : OUT std_ulogic;
            pll : OUT std_ulogic;
            dpll : OUT std_ulogic;
            dsi_out_0 : IN std_ulogic;
            dsi_out_1 : IN std_ulogic;
            dsi_out_2 : IN std_ulogic;
            dsi_out_3 : IN std_ulogic;
            lfclk : OUT std_ulogic;
            hfclk : OUT std_ulogic;
            sysclk : OUT std_ulogic;
            halfsysclk : OUT std_ulogic;
            udb_div_0 : OUT std_ulogic;
            udb_div_1 : OUT std_ulogic;
            udb_div_2 : OUT std_ulogic;
            udb_div_3 : OUT std_ulogic;
            udb_div_4 : OUT std_ulogic;
            udb_div_5 : OUT std_ulogic;
            udb_div_6 : OUT std_ulogic;
            udb_div_7 : OUT std_ulogic;
            udb_div_8 : OUT std_ulogic;
            udb_div_9 : OUT std_ulogic;
            udb_div_10 : OUT std_ulogic;
            udb_div_11 : OUT std_ulogic;
            udb_div_12 : OUT std_ulogic;
            udb_div_13 : OUT std_ulogic;
            udb_div_14 : OUT std_ulogic;
            udb_div_15 : OUT std_ulogic;
            uab_div_0 : OUT std_ulogic;
            uab_div_1 : OUT std_ulogic;
            uab_div_2 : OUT std_ulogic;
            uab_div_3 : OUT std_ulogic;
            ff_div_0 : OUT std_ulogic;
            ff_div_1 : OUT std_ulogic;
            ff_div_2 : OUT std_ulogic;
            ff_div_3 : OUT std_ulogic;
            ff_div_4 : OUT std_ulogic;
            ff_div_5 : OUT std_ulogic;
            ff_div_6 : OUT std_ulogic;
            ff_div_7 : OUT std_ulogic;
            ff_div_8 : OUT std_ulogic;
            ff_div_9 : OUT std_ulogic;
            ff_div_10 : OUT std_ulogic;
            ff_div_11 : OUT std_ulogic;
            ff_div_12 : OUT std_ulogic;
            ff_div_13 : OUT std_ulogic;
            ff_div_14 : OUT std_ulogic;
            ff_div_15 : OUT std_ulogic;
            dsi_in_0 : OUT std_ulogic;
            dsi_in_1 : OUT std_ulogic;
            dsi_in_2 : OUT std_ulogic;
            dsi_in_3 : OUT std_ulogic);
    END COMPONENT;
    COMPONENT m0s8clockgenblockcell
        PORT (
            gen_clk_in_0 : IN std_ulogic;
            gen_clk_in_1 : IN std_ulogic;
            gen_clk_in_2 : IN std_ulogic;
            gen_clk_in_3 : IN std_ulogic;
            gen_clk_in_4 : IN std_ulogic;
            gen_clk_in_5 : IN std_ulogic;
            gen_clk_in_6 : IN std_ulogic;
            gen_clk_in_7 : IN std_ulogic;
            gen_clk_out_0 : OUT std_ulogic;
            gen_clk_out_1 : OUT std_ulogic;
            gen_clk_out_2 : OUT std_ulogic;
            gen_clk_out_3 : OUT std_ulogic;
            gen_clk_out_4 : OUT std_ulogic;
            gen_clk_out_5 : OUT std_ulogic;
            gen_clk_out_6 : OUT std_ulogic;
            gen_clk_out_7 : OUT std_ulogic);
    END COMPONENT;
    COMPONENT macrocell
        PORT (
            main_0 : IN std_ulogic;
            main_1 : IN std_ulogic;
            main_2 : IN std_ulogic;
            main_3 : IN std_ulogic;
            main_4 : IN std_ulogic;
            main_5 : IN std_ulogic;
            main_6 : IN std_ulogic;
            main_7 : IN std_ulogic;
            main_8 : IN std_ulogic;
            main_9 : IN std_ulogic;
            main_10 : IN std_ulogic;
            main_11 : IN std_ulogic;
            ar_0 : IN std_ulogic;
            ap_0 : IN std_ulogic;
            clock_0 : IN std_ulogic;
            clk_en : IN std_ulogic;
            cin : IN std_ulogic;
            cpt0_0 : IN std_ulogic;
            cpt0_1 : IN std_ulogic;
            cpt0_2 : IN std_ulogic;
            cpt0_3 : IN std_ulogic;
            cpt0_4 : IN std_ulogic;
            cpt0_5 : IN std_ulogic;
            cpt0_6 : IN std_ulogic;
            cpt0_7 : IN std_ulogic;
            cpt0_8 : IN std_ulogic;
            cpt0_9 : IN std_ulogic;
            cpt0_10 : IN std_ulogic;
            cpt0_11 : IN std_ulogic;
            cpt1_0 : IN std_ulogic;
            cpt1_1 : IN std_ulogic;
            cpt1_2 : IN std_ulogic;
            cpt1_3 : IN std_ulogic;
            cpt1_4 : IN std_ulogic;
            cpt1_5 : IN std_ulogic;
            cpt1_6 : IN std_ulogic;
            cpt1_7 : IN std_ulogic;
            cpt1_8 : IN std_ulogic;
            cpt1_9 : IN std_ulogic;
            cpt1_10 : IN std_ulogic;
            cpt1_11 : IN std_ulogic;
            cout : OUT std_ulogic;
            q : OUT std_ulogic;
            q_fixed : OUT std_ulogic);
    END COMPONENT;
    ATTRIBUTE udb_clk OF macrocell : COMPONENT IS "clock_0";
    ATTRIBUTE udb_clken OF macrocell : COMPONENT IS "clk_en";
    ATTRIBUTE udb_reset OF macrocell : COMPONENT IS "ar_0";
    ATTRIBUTE udb_preset OF macrocell : COMPONENT IS "ap_0";
    ATTRIBUTE udb_chain OF macrocell : COMPONENT IS "cin,cout";
    ATTRIBUTE chain_lsb OF macrocell : COMPONENT IS "cin";
    ATTRIBUTE chain_msb OF macrocell : COMPONENT IS "cout";
    COMPONENT statusicell
        PORT (
            status_0 : IN std_ulogic;
            status_1 : IN std_ulogic;
            status_2 : IN std_ulogic;
            status_3 : IN std_ulogic;
            status_4 : IN std_ulogic;
            status_5 : IN std_ulogic;
            status_6 : IN std_ulogic;
            clock : IN std_ulogic;
            reset : IN std_ulogic;
            interrupt : OUT std_ulogic;
            clk_en : IN std_ulogic);
    END COMPONENT;
    ATTRIBUTE udb_clk OF statusicell : COMPONENT IS "clock";
    ATTRIBUTE udb_clken OF statusicell : COMPONENT IS "clk_en";
    ATTRIBUTE udb_reset OF statusicell : COMPONENT IS "reset";
BEGIN

    ClockBlock:m0s8clockblockcell
        PORT MAP(
            dsi_in_0 => ClockBlock_Routed1,
            eco => ClockBlock_ECO,
            wco => ClockBlock_WCO,
            lfclk => ClockBlock_LFCLK,
            ilo => ClockBlock_ILO,
            sysclk => ClockBlock_SYSCLK,
            ext => ClockBlock_EXTCLK,
            imo => ClockBlock_IMO,
            hfclk => ClockBlock_HFCLK,
            udb_div_0 => dclk_to_genclk);

    ClockGenBlock:m0s8clockgenblockcell
        PORT MAP(
            gen_clk_out_0 => \UART_1:Net_9_digital\,
            gen_clk_in_0 => dclk_to_genclk);

    LED:logicalport
        GENERIC MAP(
            drive_mode => "110",
            ibuf_enabled => "1",
            id => "e851a3b9-efb8-48be-bbb8-b303b216c393",
            init_dr_st => "0",
            input_buffer_sel => "00",
            input_clk_en => 0,
            input_sync => "1",
            input_sync_mode => "0",
            intr_mode => "00",
            invert_in_clock => 0,
            invert_in_clock_en => 0,
            invert_in_reset => 0,
            invert_out_clock => 0,
            invert_out_clock_en => 0,
            invert_out_reset => 0,
            io_voltage => "",
            layout_mode => "CONTIGUOUS",
            oe_conn => "0",
            oe_reset => 0,
            oe_sync => "0",
            output_clk_en => 0,
            output_clock_mode => "0",
            output_conn => "0",
            output_mode => "0",
            output_reset => 0,
            output_sync => "0",
            ovt_hyst_trim => "0",
            ovt_needed => "0",
            ovt_slew_control => "00",
            pa_in_clock => -1,
            pa_in_clock_en => -1,
            pa_in_reset => -1,
            pa_out_clock => -1,
            pa_out_clock_en => -1,
            pa_out_reset => -1,
            pin_aliases => "",
            pin_mode => "O",
            por_state => 4,
            port_alias_group => "",
            port_alias_required => 0,
            sio_group_cnt => 0,
            sio_hifreq => "",
            sio_hyst => "1",
            sio_ibuf => "00000000",
            sio_info => "00",
            sio_obuf => "00000000",
            sio_refsel => "00000000",
            sio_vtrip => "00000000",
            slew_rate => "0",
            spanning => 0,
            sw_only => 0,
            use_annotation => "0",
            vtrip => "10",
            width => 1,
            in_clk_inv => 0,
            in_clken_inv => 0,
            in_clken_mode => 1,
            in_rst_inv => 0,
            out_clk_inv => 0,
            out_clken_inv => 0,
            out_clken_mode => 1,
            out_rst_inv => 0)
        PORT MAP(
            in_clock_en => open,
            in_reset => open,
            out_clock_en => open,
            out_reset => open);

    LED(0):iocell
        GENERIC MAP(
            in_sync_mode => 0,
            out_sync_mode => 0,
            oe_sync_mode => 0,
            logicalport => "LED",
            logicalport_pin_id => 0,
            io_capabilities => "0000000000000000000000000000000000000000000000000000000000000001")
        PORT MAP(
            pa_out => LED(0)__PA,
            oe => open,
            pad_in => LED(0)_PAD,
            in_clock => open,
            in_clock_en => '1',
            in_reset => '0',
            out_clock => open,
            out_clock_en => '1',
            out_reset => '0');

    Pin_1:logicalport
        GENERIC MAP(
            drive_mode => "001",
            ibuf_enabled => "1",
            id => "264be2d3-9481-494b-8d9c-c1905a45e9cc",
            init_dr_st => "0",
            input_buffer_sel => "00",
            input_clk_en => 0,
            input_sync => "1",
            input_sync_mode => "0",
            intr_mode => "00",
            invert_in_clock => 0,
            invert_in_clock_en => 0,
            invert_in_reset => 0,
            invert_out_clock => 0,
            invert_out_clock_en => 0,
            invert_out_reset => 0,
            io_voltage => "",
            layout_mode => "CONTIGUOUS",
            oe_conn => "0",
            oe_reset => 0,
            oe_sync => "0",
            output_clk_en => 0,
            output_clock_mode => "0",
            output_conn => "0",
            output_mode => "0",
            output_reset => 0,
            output_sync => "0",
            ovt_hyst_trim => "0",
            ovt_needed => "0",
            ovt_slew_control => "00",
            pa_in_clock => -1,
            pa_in_clock_en => -1,
            pa_in_reset => -1,
            pa_out_clock => -1,
            pa_out_clock_en => -1,
            pa_out_reset => -1,
            pin_aliases => "",
            pin_mode => "I",
            por_state => 4,
            port_alias_group => "",
            port_alias_required => 0,
            sio_group_cnt => 0,
            sio_hifreq => "",
            sio_hyst => "1",
            sio_ibuf => "00000000",
            sio_info => "00",
            sio_obuf => "00000000",
            sio_refsel => "00000000",
            sio_vtrip => "00000000",
            slew_rate => "0",
            spanning => 0,
            sw_only => 0,
            use_annotation => "0",
            vtrip => "00",
            width => 1,
            in_clk_inv => 0,
            in_clken_inv => 0,
            in_clken_mode => 1,
            in_rst_inv => 0,
            out_clk_inv => 0,
            out_clken_inv => 0,
            out_clken_mode => 1,
            out_rst_inv => 0)
        PORT MAP(
            in_clock_en => open,
            in_reset => open,
            out_clock_en => open,
            out_reset => open,
            in_clock => open);

    Pin_1(0):iocell
        GENERIC MAP(
            in_sync_mode => 2,
            out_sync_mode => 0,
            oe_sync_mode => 0,
            logicalport => "Pin_1",
            logicalport_pin_id => 0,
            io_capabilities => "0000000000000000000000000000000000000000000000000000000000000101")
        PORT MAP(
            pa_out => Pin_1(0)__PA,
            oe => open,
            fb => Net_220,
            pad_in => Pin_1(0)_PAD,
            in_clock => ClockBlock_HFCLK,
            in_clock_en => '1',
            in_reset => '0',
            out_clock => open,
            out_clock_en => '1',
            out_reset => '0');

    \UART_1:BUART:HalfDuplexSend_last\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:HalfDuplexSend_last\,
            main_0 => \UART_1:BUART:control_0\,
            clock_0 => \UART_1:Net_9_digital\);

    \UART_1:BUART:pollcount_0\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * main_3) + (main_0 * !main_1 * !main_2 * !main_3)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:pollcount_0\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:rx_count_2\,
            main_2 => \UART_1:BUART:rx_count_1\,
            main_3 => \UART_1:BUART:pollcount_0\);

    \UART_1:BUART:pollcount_1\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * main_3) + (main_0 * !main_1 * !main_2 * !main_3 * main_4) + (!main_1 * !main_2 * main_3 * !main_4)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:pollcount_1\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:rx_count_2\,
            main_2 => \UART_1:BUART:rx_count_1\,
            main_3 => \UART_1:BUART:pollcount_1\,
            main_4 => \UART_1:BUART:pollcount_0\);

    \UART_1:BUART:reset_sr\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1) + (main_0 * !main_1)")
        PORT MAP(
            q => \UART_1:BUART:reset_sr\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:HalfDuplexSend_last\);

    \UART_1:BUART:rx_bitclk\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_bitclk\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:rx_count_2\,
            main_1 => \UART_1:BUART:rx_count_1\,
            main_2 => \UART_1:BUART:rx_count_0\);

    \UART_1:BUART:rx_bitclk_enable\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_4) + (main_0 * !main_1 * !main_2 * !main_3)")
        PORT MAP(
            q => \UART_1:BUART:rx_bitclk_enable\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_count_2\,
            main_2 => \UART_1:BUART:rx_count_1\,
            main_3 => \UART_1:BUART:rx_count_0\,
            main_4 => \UART_1:BUART:rx_bitclk\);

    \UART_1:BUART:rx_counter_load\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * !main_3)")
        PORT MAP(
            q => \UART_1:BUART:rx_counter_load\,
            main_0 => \UART_1:BUART:rx_state_1\,
            main_1 => \UART_1:BUART:rx_state_0\,
            main_2 => \UART_1:BUART:rx_state_3\,
            main_3 => \UART_1:BUART:rx_state_2\);

    \UART_1:BUART:rx_last\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_last\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => Net_220);

    \UART_1:BUART:rx_load_fifo\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * main_3 * !main_4 * main_8) + (!main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_6) + (!main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_7)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_load_fifo\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_state_1\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:rx_state_3\,
            main_4 => \UART_1:BUART:rx_state_2\,
            main_5 => \UART_1:BUART:rx_count_6\,
            main_6 => \UART_1:BUART:rx_count_5\,
            main_7 => \UART_1:BUART:rx_count_4\,
            main_8 => \UART_1:BUART:rx_bitclk\);

    \UART_1:BUART:rx_postpoll\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * main_2) + (main_1)")
        PORT MAP(
            q => \UART_1:BUART:rx_postpoll\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:pollcount_1\,
            main_2 => \UART_1:BUART:pollcount_0\);

    \UART_1:BUART:rx_state_0\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * !main_3 * !main_4 * main_5 * main_9 * !main_10) + (!main_1 * !main_2 * !main_3 * !main_4 * main_5 * main_9 * !main_10 * !main_11) + (main_1 * !main_2 * !main_3 * main_4 * !main_5 * main_9) + (main_1 * main_2 * !main_3 * !main_4 * !main_5 * main_9) + (main_1 * main_2 * main_3 * !main_4 * main_5 * main_9) + (!main_2 * main_3 * !main_4 * !main_5 * !main_6 * !main_7) + (!main_2 * main_3 * !main_4 * !main_5 * !main_6 * !main_8)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_state_0\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:control_0\,
            main_2 => \UART_1:BUART:rx_state_1\,
            main_3 => \UART_1:BUART:rx_state_0\,
            main_4 => \UART_1:BUART:rx_state_3\,
            main_5 => \UART_1:BUART:rx_state_2\,
            main_6 => \UART_1:BUART:rx_count_6\,
            main_7 => \UART_1:BUART:rx_count_5\,
            main_8 => \UART_1:BUART:rx_count_4\,
            main_9 => \UART_1:BUART:rx_bitclk\,
            main_10 => \UART_1:BUART:pollcount_1\,
            main_11 => \UART_1:BUART:pollcount_0\);

    \UART_1:BUART:rx_state_1\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * !main_1 * !main_2 * !main_3 * !main_4 * !main_5) + (main_0 * !main_1 * !main_2 * !main_3 * !main_4 * main_6) + (main_0 * !main_1 * !main_2 * main_4 * !main_5 * main_6) + (main_0 * main_1 * main_2 * main_3 * !main_4 * main_5 * main_6)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_state_1\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_state_1\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:hd_tx_fifo_empty\,
            main_4 => \UART_1:BUART:rx_state_3\,
            main_5 => \UART_1:BUART:rx_state_2\,
            main_6 => \UART_1:BUART:rx_bitclk\);

    \UART_1:BUART:rx_state_2\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_6 * main_9) + (!main_0 * main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_7 * !main_8 * main_9) + (main_10)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_state_2\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:control_1\,
            main_1 => \UART_1:BUART:control_0\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:rx_state_3\,
            main_4 => \UART_1:BUART:rx_state_2\,
            main_5 => \UART_1:BUART:rx_count_6\,
            main_6 => \UART_1:BUART:rx_count_5\,
            main_7 => \UART_1:BUART:rx_count_4\,
            main_8 => \UART_1:BUART:rx_count_3\,
            main_9 => \UART_1:BUART:rx_bitclk\,
            main_10 => \UART_1:BUART:rx_state_2_split\);

    \UART_1:BUART:rx_state_2_split\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * !main_3 * !main_4 * !main_5 * main_11) + (main_1 * main_2 * main_3 * !main_4 * main_5 * main_10) + (main_1 * main_3 * !main_4 * !main_5 * !main_6 * !main_7 * !main_8 * !main_9 * main_10) + (!main_2 * !main_3 * main_4 * main_10) + (!main_2 * !main_3 * main_5 * main_10) + (!main_2 * main_3 * !main_4 * !main_5 * !main_6 * !main_7) + (!main_2 * main_3 * !main_4 * !main_5 * !main_6 * !main_8)")
        PORT MAP(
            q => \UART_1:BUART:rx_state_2_split\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:control_0\,
            main_2 => \UART_1:BUART:rx_state_1\,
            main_3 => \UART_1:BUART:rx_state_0\,
            main_4 => \UART_1:BUART:rx_state_3\,
            main_5 => \UART_1:BUART:rx_state_2\,
            main_6 => \UART_1:BUART:rx_count_6\,
            main_7 => \UART_1:BUART:rx_count_5\,
            main_8 => \UART_1:BUART:rx_count_4\,
            main_9 => \UART_1:BUART:rx_count_3\,
            main_10 => \UART_1:BUART:rx_bitclk\,
            main_11 => \UART_1:BUART:rx_last\);

    \UART_1:BUART:rx_state_3\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * !main_1 * !main_2 * main_3 * main_8) + (!main_1 * !main_2 * main_3 * main_4 * main_8) + (!main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_6) + (!main_1 * main_2 * !main_3 * !main_4 * !main_5 * !main_7)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_state_3\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_state_1\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:rx_state_3\,
            main_4 => \UART_1:BUART:rx_state_2\,
            main_5 => \UART_1:BUART:rx_count_6\,
            main_6 => \UART_1:BUART:rx_count_5\,
            main_7 => \UART_1:BUART:rx_count_4\,
            main_8 => \UART_1:BUART:rx_bitclk\);

    \UART_1:BUART:rx_state_stop1_reg\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * main_2 * main_3)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_state_stop1_reg\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:rx_state_1\,
            main_1 => \UART_1:BUART:rx_state_0\,
            main_2 => \UART_1:BUART:rx_state_3\,
            main_3 => \UART_1:BUART:rx_state_2\);

    \UART_1:BUART:rx_status_0\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * main_1 * main_2 * main_3 * !main_4 * main_5 * main_6)")
        PORT MAP(
            q => \UART_1:BUART:rx_status_0\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_state_1\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:hd_tx_fifo_empty\,
            main_4 => \UART_1:BUART:rx_state_3\,
            main_5 => \UART_1:BUART:rx_state_2\,
            main_6 => \UART_1:BUART:rx_bitclk\);

    \UART_1:BUART:rx_status_1\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * main_1)")
        PORT MAP(
            q => \UART_1:BUART:rx_status_1\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:hd_tx_fifo_empty\);

    \UART_1:BUART:rx_status_3\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * !main_1 * !main_2 * main_3 * main_4 * main_5 * !main_6) + (!main_1 * !main_2 * main_3 * main_4 * main_5 * !main_6 * !main_7)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:rx_status_3\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => Net_220,
            main_1 => \UART_1:BUART:rx_state_1\,
            main_2 => \UART_1:BUART:rx_state_0\,
            main_3 => \UART_1:BUART:rx_state_3\,
            main_4 => \UART_1:BUART:rx_state_2\,
            main_5 => \UART_1:BUART:rx_bitclk\,
            main_6 => \UART_1:BUART:pollcount_1\,
            main_7 => \UART_1:BUART:pollcount_0\);

    \UART_1:BUART:rx_status_4\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * main_1)")
        PORT MAP(
            q => \UART_1:BUART:rx_status_4\,
            main_0 => \UART_1:BUART:rx_load_fifo\,
            main_1 => \UART_1:BUART:rx_fifofull\);

    \UART_1:BUART:rx_status_5\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1 * main_3) + (main_0 * !main_2)")
        PORT MAP(
            q => \UART_1:BUART:rx_status_5\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:rx_fifonotempty\,
            main_2 => \UART_1:BUART:hd_tx_fifo_notfull\,
            main_3 => \UART_1:BUART:rx_state_stop1_reg\);

    \UART_1:BUART:sCR_SyncCtl:CtrlReg\:controlcell
        GENERIC MAP(
            cy_ctrl_mode_0 => "11111111",
            cy_ctrl_mode_1 => "00000000",
            cy_ext_reset => 0,
            cy_force_order => 1,
            cy_init_value => "00000000",
            clk_inv => '0')
        PORT MAP(
            clock => \UART_1:Net_9_digital\,
            control_7 => \UART_1:BUART:control_7\,
            control_6 => \UART_1:BUART:control_6\,
            control_5 => \UART_1:BUART:control_5\,
            control_4 => \UART_1:BUART:control_4\,
            control_3 => \UART_1:BUART:control_3\,
            control_2 => \UART_1:BUART:control_2\,
            control_1 => \UART_1:BUART:control_1\,
            control_0 => \UART_1:BUART:control_0\,
            busclk => ClockBlock_HFCLK);

    \UART_1:BUART:sRX:RxBitCounter\:count7cell
        GENERIC MAP(
            cy_alt_mode => 0,
            cy_init_value => "0000000",
            cy_period => "1110010",
            cy_route_en => 1,
            cy_route_ld => 1,
            clk_inv => '0')
        PORT MAP(
            clock => \UART_1:Net_9_digital\,
            reset => open,
            load => \UART_1:BUART:rx_counter_load\,
            enable => open,
            count_6 => \UART_1:BUART:rx_count_6\,
            count_5 => \UART_1:BUART:rx_count_5\,
            count_4 => \UART_1:BUART:rx_count_4\,
            count_3 => \UART_1:BUART:rx_count_3\,
            count_2 => \UART_1:BUART:rx_count_2\,
            count_1 => \UART_1:BUART:rx_count_1\,
            count_0 => \UART_1:BUART:rx_count_0\,
            tc => \UART_1:BUART:rx_count7_tc\);

    \UART_1:BUART:sRX:RxShifter:u0\:datapathcell
        GENERIC MAP(
            a0_init => "00000000",
            a1_init => "00000000",
            ce0_sync => 1,
            ce1_sync => 1,
            cl0_sync => 1,
            cl1_sync => 1,
            cmsb_sync => 1,
            co_msb_sync => 1,
            cy_dpconfig => "0000000000000000000000000000000000000000000000000000001001000000000100000000000000010000001100000001000000000000000100100001000011111111000000001111111111111111101000000110001001000001111100000000000000001100",
            d0_init => "00000000",
            d1_init => "00000000",
            f0_blk_sync => 1,
            f0_bus_sync => 1,
            f1_blk_sync => 1,
            f1_bus_sync => 1,
            ff0_sync => 1,
            ff1_sync => 1,
            ov_msb_sync => 1,
            so_sync => 1,
            z0_sync => 1,
            z1_sync => 1,
            uses_p_in => '0',
            uses_p_out => '0',
            clk_inv => '0')
        PORT MAP(
            reset => open,
            clock => \UART_1:Net_9_digital\,
            cs_addr_2 => \UART_1:BUART:rx_state_1\,
            cs_addr_1 => \UART_1:BUART:rx_state_0\,
            cs_addr_0 => \UART_1:BUART:rx_bitclk_enable\,
            route_si => \UART_1:BUART:rx_postpoll\,
            f0_load => \UART_1:BUART:rx_load_fifo\,
            so_comb => \UART_1:BUART:hd_shift_out\,
            f0_bus_stat_comb => \UART_1:BUART:rx_fifonotempty\,
            f0_blk_stat_comb => \UART_1:BUART:rx_fifofull\,
            f1_bus_stat_comb => \UART_1:BUART:hd_tx_fifo_notfull\,
            f1_blk_stat_comb => \UART_1:BUART:hd_tx_fifo_empty\,
            busclk => ClockBlock_HFCLK);

    \UART_1:BUART:sRX:RxSts\:statusicell
        GENERIC MAP(
            cy_force_order => 1,
            cy_int_mask => "1111111",
            cy_md_select => "1011111",
            clk_inv => '0',
            reset_inv => '0')
        PORT MAP(
            reset => \UART_1:BUART:reset_sr\,
            clock => \UART_1:Net_9_digital\,
            status_6 => open,
            status_5 => \UART_1:BUART:rx_status_5\,
            status_4 => \UART_1:BUART:rx_status_4\,
            status_3 => \UART_1:BUART:rx_status_3\,
            status_2 => open,
            status_1 => \UART_1:BUART:rx_status_1\,
            status_0 => \UART_1:BUART:rx_status_0\,
            interrupt => Net_211);

    \UART_1:BUART:txn\:macrocell
        GENERIC MAP(
            eqn_main => "(main_0 * main_2 * !main_3 * !main_4 * !main_5 * !main_7) + (main_0 * main_2 * !main_4 * !main_5 * main_6 * !main_7) + (main_1 * !main_7)",
            clk_inv => '0')
        PORT MAP(
            q => \UART_1:BUART:txn\,
            clock_0 => \UART_1:Net_9_digital\,
            main_0 => \UART_1:BUART:control_0\,
            main_1 => \UART_1:BUART:txn\,
            main_2 => \UART_1:BUART:rx_state_1\,
            main_3 => \UART_1:BUART:rx_state_0\,
            main_4 => \UART_1:BUART:rx_state_3\,
            main_5 => \UART_1:BUART:rx_state_2\,
            main_6 => \UART_1:BUART:rx_bitclk\,
            main_7 => \UART_1:BUART:txn_split\);

    \UART_1:BUART:txn_split\:macrocell
        GENERIC MAP(
            eqn_main => "(!main_0 * main_1 * main_2 * main_3 * !main_5 * !main_6 * !main_7 * !main_8 * main_11) + (!main_0 * main_1 * main_2 * main_3 * !main_5 * !main_6 * !main_7 * !main_9 * !main_10 * main_11) + (!main_0 * main_1 * main_2 * main_4 * !main_5 * !main_6 * main_11) + (main_1 * !main_2 * !main_3 * !main_6 * main_11) + (main_1 * main_2 * main_3 * !main_5 * !main_6 * !main_7 * !main_8 * !main_9 * !main_10 * main_11) + (main_1 * !main_3 * main_4 * !main_5 * !main_6 * main_11) + (!main_2 * !main_3 * !main_5 * !main_6)")
        PORT MAP(
            q => \UART_1:BUART:txn_split\,
            main_0 => \UART_1:BUART:control_1\,
            main_1 => \UART_1:BUART:control_0\,
            main_2 => \UART_1:BUART:rx_state_1\,
            main_3 => \UART_1:BUART:rx_state_0\,
            main_4 => \UART_1:BUART:hd_shift_out\,
            main_5 => \UART_1:BUART:rx_state_3\,
            main_6 => \UART_1:BUART:rx_state_2\,
            main_7 => \UART_1:BUART:rx_count_6\,
            main_8 => \UART_1:BUART:rx_count_5\,
            main_9 => \UART_1:BUART:rx_count_4\,
            main_10 => \UART_1:BUART:rx_count_3\,
            main_11 => \UART_1:BUART:rx_bitclk\);

    isr_UART_1:interrupt
        GENERIC MAP(
            int_type => "10")
        PORT MAP(
            interrupt => Net_211,
            clock => ClockBlock_HFCLK);

END __DEFAULT__;
