ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Tx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	Tx_initVar
  19              		.bss
  20              		.type	Tx_initVar, %object
  21              		.size	Tx_initVar, 1
  22              	Tx_initVar:
  23 0000 00       		.space	1
  24              		.section	.text.Tx_Start,"ax",%progbits
  25              		.align	2
  26              		.global	Tx_Start
  27              		.thumb
  28              		.thumb_func
  29              		.type	Tx_Start, %function
  30              	Tx_Start:
  31              	.LFB0:
  32              		.file 1 ".\\Generated_Source\\PSoC5\\Tx.c"
   1:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/Tx.c **** * File Name: Tx.c
   3:.\Generated_Source\PSoC5/Tx.c **** * Version 2.40
   4:.\Generated_Source\PSoC5/Tx.c **** *
   5:.\Generated_Source\PSoC5/Tx.c **** * Description:
   6:.\Generated_Source\PSoC5/Tx.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/Tx.c **** *
   8:.\Generated_Source\PSoC5/Tx.c **** * Note:
   9:.\Generated_Source\PSoC5/Tx.c **** *
  10:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/Tx.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/Tx.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/Tx.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/Tx.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/Tx.c **** 
  17:.\Generated_Source\PSoC5/Tx.c **** #include "Tx.h"
  18:.\Generated_Source\PSoC5/Tx.c **** #if (Tx_INTERNAL_CLOCK_USED)
  19:.\Generated_Source\PSoC5/Tx.c ****     #include "Tx_IntClock.h"
  20:.\Generated_Source\PSoC5/Tx.c **** #endif /* End Tx_INTERNAL_CLOCK_USED */
  21:.\Generated_Source\PSoC5/Tx.c **** 
  22:.\Generated_Source\PSoC5/Tx.c **** 
  23:.\Generated_Source\PSoC5/Tx.c **** /***************************************
  24:.\Generated_Source\PSoC5/Tx.c **** * Global data allocation
  25:.\Generated_Source\PSoC5/Tx.c **** ***************************************/
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 2


  26:.\Generated_Source\PSoC5/Tx.c **** 
  27:.\Generated_Source\PSoC5/Tx.c **** uint8 Tx_initVar = 0u;
  28:.\Generated_Source\PSoC5/Tx.c **** 
  29:.\Generated_Source\PSoC5/Tx.c **** #if (Tx_TX_INTERRUPT_ENABLED && Tx_TX_ENABLED)
  30:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_txBuffer[Tx_TX_BUFFER_SIZE];
  31:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_txBufferRead = 0u;
  32:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/Tx.c **** #endif /* (Tx_TX_INTERRUPT_ENABLED && Tx_TX_ENABLED) */
  34:.\Generated_Source\PSoC5/Tx.c **** 
  35:.\Generated_Source\PSoC5/Tx.c **** #if (Tx_RX_INTERRUPT_ENABLED && (Tx_RX_ENABLED || Tx_HD_ENABLED))
  36:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_errorStatus = 0u;
  37:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_rxBuffer[Tx_RX_BUFFER_SIZE];
  38:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_rxBufferRead  = 0u;
  39:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_rxBufferWrite = 0u;
  40:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_rxBufferLoopDetect = 0u;
  41:.\Generated_Source\PSoC5/Tx.c ****     volatile uint8 Tx_rxBufferOverflow   = 0u;
  42:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RXHW_ADDRESS_ENABLED)
  43:.\Generated_Source\PSoC5/Tx.c ****         volatile uint8 Tx_rxAddressMode = Tx_RX_ADDRESS_MODE;
  44:.\Generated_Source\PSoC5/Tx.c ****         volatile uint8 Tx_rxAddressDetected = 0u;
  45:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RXHW_ADDRESS_ENABLED) */
  46:.\Generated_Source\PSoC5/Tx.c **** #endif /* (Tx_RX_INTERRUPT_ENABLED && (Tx_RX_ENABLED || Tx_HD_ENABLED)) */
  47:.\Generated_Source\PSoC5/Tx.c **** 
  48:.\Generated_Source\PSoC5/Tx.c **** 
  49:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
  50:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_Start
  51:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
  52:.\Generated_Source\PSoC5/Tx.c **** *
  53:.\Generated_Source\PSoC5/Tx.c **** * Summary:
  54:.\Generated_Source\PSoC5/Tx.c **** *  This is the preferred method to begin component operation.
  55:.\Generated_Source\PSoC5/Tx.c **** *  Tx_Start() sets the initVar variable, calls the
  56:.\Generated_Source\PSoC5/Tx.c **** *  Tx_Init() function, and then calls the
  57:.\Generated_Source\PSoC5/Tx.c **** *  Tx_Enable() function.
  58:.\Generated_Source\PSoC5/Tx.c **** *
  59:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
  60:.\Generated_Source\PSoC5/Tx.c **** *  None.
  61:.\Generated_Source\PSoC5/Tx.c **** *
  62:.\Generated_Source\PSoC5/Tx.c **** * Return:
  63:.\Generated_Source\PSoC5/Tx.c **** *  None.
  64:.\Generated_Source\PSoC5/Tx.c **** *
  65:.\Generated_Source\PSoC5/Tx.c **** * Global variables:
  66:.\Generated_Source\PSoC5/Tx.c **** *  The Tx_intiVar variable is used to indicate initial
  67:.\Generated_Source\PSoC5/Tx.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:.\Generated_Source\PSoC5/Tx.c **** *  and set to one (1u) the first time Tx_Start() is called. This
  69:.\Generated_Source\PSoC5/Tx.c **** *  allows for component initialization without re-initialization in all
  70:.\Generated_Source\PSoC5/Tx.c **** *  subsequent calls to the Tx_Start() routine.
  71:.\Generated_Source\PSoC5/Tx.c **** *
  72:.\Generated_Source\PSoC5/Tx.c **** * Reentrant:
  73:.\Generated_Source\PSoC5/Tx.c **** *  No.
  74:.\Generated_Source\PSoC5/Tx.c **** *
  75:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
  76:.\Generated_Source\PSoC5/Tx.c **** void Tx_Start(void) 
  77:.\Generated_Source\PSoC5/Tx.c **** {
  33              		.loc 1 77 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 3


  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  78:.\Generated_Source\PSoC5/Tx.c ****     /* If not initialized then initialize all required hardware and software */
  79:.\Generated_Source\PSoC5/Tx.c ****     if(Tx_initVar == 0u)
  43              		.loc 1 79 0
  44 0004 054B     		ldr	r3, .L3
  45 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  46 0008 002B     		cmp	r3, #0
  47 000a 04D1     		bne	.L2
  80:.\Generated_Source\PSoC5/Tx.c ****     {
  81:.\Generated_Source\PSoC5/Tx.c ****         Tx_Init();
  48              		.loc 1 81 0
  49 000c FFF7FEFF 		bl	Tx_Init
  82:.\Generated_Source\PSoC5/Tx.c ****         Tx_initVar = 1u;
  50              		.loc 1 82 0
  51 0010 024B     		ldr	r3, .L3
  52 0012 0122     		movs	r2, #1
  53 0014 1A70     		strb	r2, [r3]
  54              	.L2:
  83:.\Generated_Source\PSoC5/Tx.c ****     }
  84:.\Generated_Source\PSoC5/Tx.c **** 
  85:.\Generated_Source\PSoC5/Tx.c ****     Tx_Enable();
  55              		.loc 1 85 0
  56 0016 FFF7FEFF 		bl	Tx_Enable
  86:.\Generated_Source\PSoC5/Tx.c **** }
  57              		.loc 1 86 0
  58 001a 80BD     		pop	{r7, pc}
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 001c 00000000 		.word	Tx_initVar
  63              		.cfi_endproc
  64              	.LFE0:
  65              		.size	Tx_Start, .-Tx_Start
  66              		.section	.text.Tx_Init,"ax",%progbits
  67              		.align	2
  68              		.global	Tx_Init
  69              		.thumb
  70              		.thumb_func
  71              		.type	Tx_Init, %function
  72              	Tx_Init:
  73              	.LFB1:
  87:.\Generated_Source\PSoC5/Tx.c **** 
  88:.\Generated_Source\PSoC5/Tx.c **** 
  89:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_Init
  91:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
  92:.\Generated_Source\PSoC5/Tx.c **** *
  93:.\Generated_Source\PSoC5/Tx.c **** * Summary:
  94:.\Generated_Source\PSoC5/Tx.c **** *  Initializes or restores the component according to the customizer Configure
  95:.\Generated_Source\PSoC5/Tx.c **** *  dialog settings. It is not necessary to call Tx_Init() because
  96:.\Generated_Source\PSoC5/Tx.c **** *  the Tx_Start() API calls this function and is the preferred
  97:.\Generated_Source\PSoC5/Tx.c **** *  method to begin component operation.
  98:.\Generated_Source\PSoC5/Tx.c **** *
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 4


  99:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
 100:.\Generated_Source\PSoC5/Tx.c **** *  None.
 101:.\Generated_Source\PSoC5/Tx.c **** *
 102:.\Generated_Source\PSoC5/Tx.c **** * Return:
 103:.\Generated_Source\PSoC5/Tx.c **** *  None.
 104:.\Generated_Source\PSoC5/Tx.c **** *
 105:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC5/Tx.c **** void Tx_Init(void) 
 107:.\Generated_Source\PSoC5/Tx.c **** {
  74              		.loc 1 107 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79 0000 80B4     		push	{r7}
  80              		.cfi_def_cfa_offset 4
  81              		.cfi_offset 7, -4
  82 0002 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
 108:.\Generated_Source\PSoC5/Tx.c ****     #if(Tx_RX_ENABLED || Tx_HD_ENABLED)
 109:.\Generated_Source\PSoC5/Tx.c **** 
 110:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_RX_INTERRUPT_ENABLED)
 111:.\Generated_Source\PSoC5/Tx.c ****             /* Set RX interrupt vector and priority */
 112:.\Generated_Source\PSoC5/Tx.c ****             (void) CyIntSetVector(Tx_RX_VECT_NUM, &Tx_RXISR);
 113:.\Generated_Source\PSoC5/Tx.c ****             CyIntSetPriority(Tx_RX_VECT_NUM, Tx_RX_PRIOR_NUM);
 114:.\Generated_Source\PSoC5/Tx.c ****             Tx_errorStatus = 0u;
 115:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 116:.\Generated_Source\PSoC5/Tx.c **** 
 117:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_RXHW_ADDRESS_ENABLED)
 118:.\Generated_Source\PSoC5/Tx.c ****             Tx_SetRxAddressMode(Tx_RX_ADDRESS_MODE);
 119:.\Generated_Source\PSoC5/Tx.c ****             Tx_SetRxAddress1(Tx_RX_HW_ADDRESS1);
 120:.\Generated_Source\PSoC5/Tx.c ****             Tx_SetRxAddress2(Tx_RX_HW_ADDRESS2);
 121:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_RXHW_ADDRESS_ENABLED */
 122:.\Generated_Source\PSoC5/Tx.c **** 
 123:.\Generated_Source\PSoC5/Tx.c ****         /* Init Count7 period */
 124:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXBITCTR_PERIOD_REG = Tx_RXBITCTR_INIT;
 125:.\Generated_Source\PSoC5/Tx.c ****         /* Configure the Initial RX interrupt mask */
 126:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXSTATUS_MASK_REG  = Tx_INIT_RX_INTERRUPTS_MASK;
 127:.\Generated_Source\PSoC5/Tx.c ****     #endif /* End Tx_RX_ENABLED || Tx_HD_ENABLED*/
 128:.\Generated_Source\PSoC5/Tx.c **** 
 129:.\Generated_Source\PSoC5/Tx.c ****     #if(Tx_TX_ENABLED)
 130:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TX_INTERRUPT_ENABLED)
 131:.\Generated_Source\PSoC5/Tx.c ****             /* Set TX interrupt vector and priority */
 132:.\Generated_Source\PSoC5/Tx.c ****             (void) CyIntSetVector(Tx_TX_VECT_NUM, &Tx_TXISR);
 133:.\Generated_Source\PSoC5/Tx.c ****             CyIntSetPriority(Tx_TX_VECT_NUM, Tx_TX_PRIOR_NUM);
 134:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_INTERRUPT_ENABLED) */
 135:.\Generated_Source\PSoC5/Tx.c **** 
 136:.\Generated_Source\PSoC5/Tx.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TXCLKGEN_DP)
 138:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXBITCLKGEN_CTR_REG = Tx_BIT_CENTER;
  84              		.loc 1 138 0
  85 0004 064B     		ldr	r3, .L6
  86 0006 0622     		movs	r2, #6
  87 0008 1A70     		strb	r2, [r3]
 139:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXBITCLKTX_COMPLETE_REG = ((Tx_NUMBER_OF_DATA_BITS +
  88              		.loc 1 139 0
  89 000a 064B     		ldr	r3, .L6+4
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 5


  90 000c 4722     		movs	r2, #71
  91 000e 1A70     		strb	r2, [r3]
 140:.\Generated_Source\PSoC5/Tx.c ****                         Tx_NUMBER_OF_START_BIT) * Tx_OVER_SAMPLE_COUNT) - 1u;
 141:.\Generated_Source\PSoC5/Tx.c ****         #else
 142:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXBITCTR_PERIOD_REG = ((Tx_NUMBER_OF_DATA_BITS +
 143:.\Generated_Source\PSoC5/Tx.c ****                         Tx_NUMBER_OF_START_BIT) * Tx_OVER_SAMPLE_8) - 1u;
 144:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_TXCLKGEN_DP */
 145:.\Generated_Source\PSoC5/Tx.c **** 
 146:.\Generated_Source\PSoC5/Tx.c ****         /* Configure the Initial TX interrupt mask */
 147:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TX_INTERRUPT_ENABLED)
 148:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXSTATUS_MASK_REG = Tx_TX_STS_FIFO_EMPTY;
 149:.\Generated_Source\PSoC5/Tx.c ****         #else
 150:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXSTATUS_MASK_REG = Tx_INIT_TX_INTERRUPTS_MASK;
  92              		.loc 1 150 0
  93 0010 054B     		ldr	r3, .L6+8
  94 0012 0022     		movs	r2, #0
  95 0014 1A70     		strb	r2, [r3]
 151:.\Generated_Source\PSoC5/Tx.c ****         #endif /*End Tx_TX_INTERRUPT_ENABLED*/
 152:.\Generated_Source\PSoC5/Tx.c **** 
 153:.\Generated_Source\PSoC5/Tx.c ****     #endif /* End Tx_TX_ENABLED */
 154:.\Generated_Source\PSoC5/Tx.c **** 
 155:.\Generated_Source\PSoC5/Tx.c ****     #if(Tx_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:.\Generated_Source\PSoC5/Tx.c ****         Tx_WriteControlRegister( \
 157:.\Generated_Source\PSoC5/Tx.c ****             (Tx_ReadControlRegister() & (uint8)~Tx_CTRL_PARITY_TYPE_MASK) | \
 158:.\Generated_Source\PSoC5/Tx.c ****             (uint8)(Tx_PARITY_TYPE << Tx_CTRL_PARITY_TYPE0_SHIFT) );
 159:.\Generated_Source\PSoC5/Tx.c ****     #endif /* End Tx_PARITY_TYPE_SW */
 160:.\Generated_Source\PSoC5/Tx.c **** }
  96              		.loc 1 160 0
  97 0016 BD46     		mov	sp, r7
  98              		@ sp needed
  99 0018 5DF8047B 		ldr	r7, [sp], #4
 100 001c 7047     		bx	lr
 101              	.L7:
 102 001e 00BF     		.align	2
 103              	.L6:
 104 0020 2D640040 		.word	1073767469
 105 0024 3D640040 		.word	1073767485
 106 0028 8C640040 		.word	1073767564
 107              		.cfi_endproc
 108              	.LFE1:
 109              		.size	Tx_Init, .-Tx_Init
 110              		.section	.text.Tx_Enable,"ax",%progbits
 111              		.align	2
 112              		.global	Tx_Enable
 113              		.thumb
 114              		.thumb_func
 115              		.type	Tx_Enable, %function
 116              	Tx_Enable:
 117              	.LFB2:
 161:.\Generated_Source\PSoC5/Tx.c **** 
 162:.\Generated_Source\PSoC5/Tx.c **** 
 163:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_Enable
 165:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
 166:.\Generated_Source\PSoC5/Tx.c **** *
 167:.\Generated_Source\PSoC5/Tx.c **** * Summary:
 168:.\Generated_Source\PSoC5/Tx.c **** *  Activates the hardware and begins component operation. It is not necessary
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 6


 169:.\Generated_Source\PSoC5/Tx.c **** *  to call Tx_Enable() because the Tx_Start() API
 170:.\Generated_Source\PSoC5/Tx.c **** *  calls this function, which is the preferred method to begin component
 171:.\Generated_Source\PSoC5/Tx.c **** *  operation.
 172:.\Generated_Source\PSoC5/Tx.c **** 
 173:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
 174:.\Generated_Source\PSoC5/Tx.c **** *  None.
 175:.\Generated_Source\PSoC5/Tx.c **** *
 176:.\Generated_Source\PSoC5/Tx.c **** * Return:
 177:.\Generated_Source\PSoC5/Tx.c **** *  None.
 178:.\Generated_Source\PSoC5/Tx.c **** *
 179:.\Generated_Source\PSoC5/Tx.c **** * Global Variables:
 180:.\Generated_Source\PSoC5/Tx.c **** *  Tx_rxAddressDetected - set to initial state (0).
 181:.\Generated_Source\PSoC5/Tx.c **** *
 182:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
 183:.\Generated_Source\PSoC5/Tx.c **** void Tx_Enable(void) 
 184:.\Generated_Source\PSoC5/Tx.c **** {
 118              		.loc 1 184 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 80B5     		push	{r7, lr}
 123              		.cfi_def_cfa_offset 8
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 82B0     		sub	sp, sp, #8
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
 185:.\Generated_Source\PSoC5/Tx.c ****     uint8 enableInterrupts;
 186:.\Generated_Source\PSoC5/Tx.c ****     enableInterrupts = CyEnterCriticalSection();
 130              		.loc 1 186 0
 131 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 132 000a 0346     		mov	r3, r0
 133 000c FB71     		strb	r3, [r7, #7]
 187:.\Generated_Source\PSoC5/Tx.c **** 
 188:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_ENABLED || Tx_HD_ENABLED)
 189:.\Generated_Source\PSoC5/Tx.c ****         /* RX Counter (Count7) Enable */
 190:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXBITCTR_CONTROL_REG |= Tx_CNTR_ENABLE;
 191:.\Generated_Source\PSoC5/Tx.c **** 
 192:.\Generated_Source\PSoC5/Tx.c ****         /* Enable the RX Interrupt */
 193:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXSTATUS_ACTL_REG  |= Tx_INT_ENABLE;
 194:.\Generated_Source\PSoC5/Tx.c **** 
 195:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_RX_INTERRUPT_ENABLED)
 196:.\Generated_Source\PSoC5/Tx.c ****             Tx_EnableRxInt();
 197:.\Generated_Source\PSoC5/Tx.c **** 
 198:.\Generated_Source\PSoC5/Tx.c ****             #if (Tx_RXHW_ADDRESS_ENABLED)
 199:.\Generated_Source\PSoC5/Tx.c ****                 Tx_rxAddressDetected = 0u;
 200:.\Generated_Source\PSoC5/Tx.c ****             #endif /* (Tx_RXHW_ADDRESS_ENABLED) */
 201:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 202:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_ENABLED || Tx_HD_ENABLED) */
 203:.\Generated_Source\PSoC5/Tx.c **** 
 204:.\Generated_Source\PSoC5/Tx.c ****     #if(Tx_TX_ENABLED)
 205:.\Generated_Source\PSoC5/Tx.c ****         /* TX Counter (DP/Count7) Enable */
 206:.\Generated_Source\PSoC5/Tx.c ****         #if(!Tx_TXCLKGEN_DP)
 207:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXBITCTR_CONTROL_REG |= Tx_CNTR_ENABLE;
 208:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_TXCLKGEN_DP */
 209:.\Generated_Source\PSoC5/Tx.c **** 
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 7


 210:.\Generated_Source\PSoC5/Tx.c ****         /* Enable the TX Interrupt */
 211:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXSTATUS_ACTL_REG |= Tx_INT_ENABLE;
 134              		.loc 1 211 0
 135 000e 084B     		ldr	r3, .L9
 136 0010 074A     		ldr	r2, .L9
 137 0012 1278     		ldrb	r2, [r2]
 138 0014 D2B2     		uxtb	r2, r2
 139 0016 42F01002 		orr	r2, r2, #16
 140 001a D2B2     		uxtb	r2, r2
 141 001c 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TX_INTERRUPT_ENABLED)
 213:.\Generated_Source\PSoC5/Tx.c ****             Tx_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:.\Generated_Source\PSoC5/Tx.c ****             Tx_EnableTxInt();
 215:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_INTERRUPT_ENABLED) */
 216:.\Generated_Source\PSoC5/Tx.c ****      #endif /* (Tx_TX_INTERRUPT_ENABLED) */
 217:.\Generated_Source\PSoC5/Tx.c **** 
 218:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_INTERNAL_CLOCK_USED)
 219:.\Generated_Source\PSoC5/Tx.c ****         Tx_IntClock_Start();  /* Enable the clock */
 142              		.loc 1 219 0
 143 001e FFF7FEFF 		bl	Tx_IntClock_Start
 220:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_INTERNAL_CLOCK_USED) */
 221:.\Generated_Source\PSoC5/Tx.c **** 
 222:.\Generated_Source\PSoC5/Tx.c ****     CyExitCriticalSection(enableInterrupts);
 144              		.loc 1 222 0
 145 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 146 0024 1846     		mov	r0, r3
 147 0026 FFF7FEFF 		bl	CyExitCriticalSection
 223:.\Generated_Source\PSoC5/Tx.c **** }
 148              		.loc 1 223 0
 149 002a 0837     		adds	r7, r7, #8
 150 002c BD46     		mov	sp, r7
 151              		@ sp needed
 152 002e 80BD     		pop	{r7, pc}
 153              	.L10:
 154              		.align	2
 155              	.L9:
 156 0030 9C640040 		.word	1073767580
 157              		.cfi_endproc
 158              	.LFE2:
 159              		.size	Tx_Enable, .-Tx_Enable
 160              		.section	.text.Tx_Stop,"ax",%progbits
 161              		.align	2
 162              		.global	Tx_Stop
 163              		.thumb
 164              		.thumb_func
 165              		.type	Tx_Stop, %function
 166              	Tx_Stop:
 167              	.LFB3:
 224:.\Generated_Source\PSoC5/Tx.c **** 
 225:.\Generated_Source\PSoC5/Tx.c **** 
 226:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
 227:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_Stop
 228:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
 229:.\Generated_Source\PSoC5/Tx.c **** *
 230:.\Generated_Source\PSoC5/Tx.c **** * Summary:
 231:.\Generated_Source\PSoC5/Tx.c **** *  Disables the UART operation.
 232:.\Generated_Source\PSoC5/Tx.c **** *
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 8


 233:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
 234:.\Generated_Source\PSoC5/Tx.c **** *  None.
 235:.\Generated_Source\PSoC5/Tx.c **** *
 236:.\Generated_Source\PSoC5/Tx.c **** * Return:
 237:.\Generated_Source\PSoC5/Tx.c **** *  None.
 238:.\Generated_Source\PSoC5/Tx.c **** *
 239:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
 240:.\Generated_Source\PSoC5/Tx.c **** void Tx_Stop(void) 
 241:.\Generated_Source\PSoC5/Tx.c **** {
 168              		.loc 1 241 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 8
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 7, -8
 175              		.cfi_offset 14, -4
 176 0002 82B0     		sub	sp, sp, #8
 177              		.cfi_def_cfa_offset 16
 178 0004 00AF     		add	r7, sp, #0
 179              		.cfi_def_cfa_register 7
 242:.\Generated_Source\PSoC5/Tx.c ****     uint8 enableInterrupts;
 243:.\Generated_Source\PSoC5/Tx.c ****     enableInterrupts = CyEnterCriticalSection();
 180              		.loc 1 243 0
 181 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 182 000a 0346     		mov	r3, r0
 183 000c FB71     		strb	r3, [r7, #7]
 244:.\Generated_Source\PSoC5/Tx.c **** 
 245:.\Generated_Source\PSoC5/Tx.c ****     /* Write Bit Counter Disable */
 246:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_ENABLED || Tx_HD_ENABLED)
 247:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXBITCTR_CONTROL_REG &= (uint8) ~Tx_CNTR_ENABLE;
 248:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_ENABLED || Tx_HD_ENABLED) */
 249:.\Generated_Source\PSoC5/Tx.c **** 
 250:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_TX_ENABLED)
 251:.\Generated_Source\PSoC5/Tx.c ****         #if(!Tx_TXCLKGEN_DP)
 252:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXBITCTR_CONTROL_REG &= (uint8) ~Tx_CNTR_ENABLE;
 253:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (!Tx_TXCLKGEN_DP) */
 254:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_TX_ENABLED) */
 255:.\Generated_Source\PSoC5/Tx.c **** 
 256:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_INTERNAL_CLOCK_USED)
 257:.\Generated_Source\PSoC5/Tx.c ****         Tx_IntClock_Stop();   /* Disable the clock */
 184              		.loc 1 257 0
 185 000e FFF7FEFF 		bl	Tx_IntClock_Stop
 258:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_INTERNAL_CLOCK_USED) */
 259:.\Generated_Source\PSoC5/Tx.c **** 
 260:.\Generated_Source\PSoC5/Tx.c ****     /* Disable internal interrupt component */
 261:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_ENABLED || Tx_HD_ENABLED)
 262:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXSTATUS_ACTL_REG  &= (uint8) ~Tx_INT_ENABLE;
 263:.\Generated_Source\PSoC5/Tx.c **** 
 264:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_RX_INTERRUPT_ENABLED)
 265:.\Generated_Source\PSoC5/Tx.c ****             Tx_DisableRxInt();
 266:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 267:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_ENABLED || Tx_HD_ENABLED) */
 268:.\Generated_Source\PSoC5/Tx.c **** 
 269:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_TX_ENABLED)
 270:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXSTATUS_ACTL_REG &= (uint8) ~Tx_INT_ENABLE;
 186              		.loc 1 270 0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 9


 187 0012 074B     		ldr	r3, .L12
 188 0014 064A     		ldr	r2, .L12
 189 0016 1278     		ldrb	r2, [r2]
 190 0018 D2B2     		uxtb	r2, r2
 191 001a 22F01002 		bic	r2, r2, #16
 192 001e D2B2     		uxtb	r2, r2
 193 0020 1A70     		strb	r2, [r3]
 271:.\Generated_Source\PSoC5/Tx.c **** 
 272:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TX_INTERRUPT_ENABLED)
 273:.\Generated_Source\PSoC5/Tx.c ****             Tx_DisableTxInt();
 274:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_INTERRUPT_ENABLED) */
 275:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_TX_ENABLED) */
 276:.\Generated_Source\PSoC5/Tx.c **** 
 277:.\Generated_Source\PSoC5/Tx.c ****     CyExitCriticalSection(enableInterrupts);
 194              		.loc 1 277 0
 195 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 196 0024 1846     		mov	r0, r3
 197 0026 FFF7FEFF 		bl	CyExitCriticalSection
 278:.\Generated_Source\PSoC5/Tx.c **** }
 198              		.loc 1 278 0
 199 002a 0837     		adds	r7, r7, #8
 200 002c BD46     		mov	sp, r7
 201              		@ sp needed
 202 002e 80BD     		pop	{r7, pc}
 203              	.L13:
 204              		.align	2
 205              	.L12:
 206 0030 9C640040 		.word	1073767580
 207              		.cfi_endproc
 208              	.LFE3:
 209              		.size	Tx_Stop, .-Tx_Stop
 210              		.section	.text.Tx_ReadControlRegister,"ax",%progbits
 211              		.align	2
 212              		.global	Tx_ReadControlRegister
 213              		.thumb
 214              		.thumb_func
 215              		.type	Tx_ReadControlRegister, %function
 216              	Tx_ReadControlRegister:
 217              	.LFB4:
 279:.\Generated_Source\PSoC5/Tx.c **** 
 280:.\Generated_Source\PSoC5/Tx.c **** 
 281:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_ReadControlRegister
 283:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
 284:.\Generated_Source\PSoC5/Tx.c **** *
 285:.\Generated_Source\PSoC5/Tx.c **** * Summary:
 286:.\Generated_Source\PSoC5/Tx.c **** *  Returns the current value of the control register.
 287:.\Generated_Source\PSoC5/Tx.c **** *
 288:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
 289:.\Generated_Source\PSoC5/Tx.c **** *  None.
 290:.\Generated_Source\PSoC5/Tx.c **** *
 291:.\Generated_Source\PSoC5/Tx.c **** * Return:
 292:.\Generated_Source\PSoC5/Tx.c **** *  Contents of the control register.
 293:.\Generated_Source\PSoC5/Tx.c **** *
 294:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC5/Tx.c **** uint8 Tx_ReadControlRegister(void) 
 296:.\Generated_Source\PSoC5/Tx.c **** {
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 10


 218              		.loc 1 296 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223 0000 80B4     		push	{r7}
 224              		.cfi_def_cfa_offset 4
 225              		.cfi_offset 7, -4
 226 0002 00AF     		add	r7, sp, #0
 227              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_CONTROL_REG_REMOVED)
 298:.\Generated_Source\PSoC5/Tx.c ****         return(0u);
 228              		.loc 1 298 0
 229 0004 0023     		movs	r3, #0
 299:.\Generated_Source\PSoC5/Tx.c ****     #else
 300:.\Generated_Source\PSoC5/Tx.c ****         return(Tx_CONTROL_REG);
 301:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_CONTROL_REG_REMOVED) */
 302:.\Generated_Source\PSoC5/Tx.c **** }
 230              		.loc 1 302 0
 231 0006 1846     		mov	r0, r3
 232 0008 BD46     		mov	sp, r7
 233              		@ sp needed
 234 000a 5DF8047B 		ldr	r7, [sp], #4
 235 000e 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE4:
 238              		.size	Tx_ReadControlRegister, .-Tx_ReadControlRegister
 239              		.section	.text.Tx_WriteControlRegister,"ax",%progbits
 240              		.align	2
 241              		.global	Tx_WriteControlRegister
 242              		.thumb
 243              		.thumb_func
 244              		.type	Tx_WriteControlRegister, %function
 245              	Tx_WriteControlRegister:
 246              	.LFB5:
 303:.\Generated_Source\PSoC5/Tx.c **** 
 304:.\Generated_Source\PSoC5/Tx.c **** 
 305:.\Generated_Source\PSoC5/Tx.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC5/Tx.c **** * Function Name: Tx_WriteControlRegister
 307:.\Generated_Source\PSoC5/Tx.c **** ********************************************************************************
 308:.\Generated_Source\PSoC5/Tx.c **** *
 309:.\Generated_Source\PSoC5/Tx.c **** * Summary:
 310:.\Generated_Source\PSoC5/Tx.c **** *  Writes an 8-bit value into the control register
 311:.\Generated_Source\PSoC5/Tx.c **** *
 312:.\Generated_Source\PSoC5/Tx.c **** * Parameters:
 313:.\Generated_Source\PSoC5/Tx.c **** *  control:  control register value
 314:.\Generated_Source\PSoC5/Tx.c **** *
 315:.\Generated_Source\PSoC5/Tx.c **** * Return:
 316:.\Generated_Source\PSoC5/Tx.c **** *  None.
 317:.\Generated_Source\PSoC5/Tx.c **** *
 318:.\Generated_Source\PSoC5/Tx.c **** *******************************************************************************/
 319:.\Generated_Source\PSoC5/Tx.c **** void  Tx_WriteControlRegister(uint8 control) 
 320:.\Generated_Source\PSoC5/Tx.c **** {
 247              		.loc 1 320 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 8
 250              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 11


 251              		@ link register save eliminated.
 252 0000 80B4     		push	{r7}
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 83B0     		sub	sp, sp, #12
 256              		.cfi_def_cfa_offset 16
 257 0004 00AF     		add	r7, sp, #0
 258              		.cfi_def_cfa_register 7
 259 0006 0346     		mov	r3, r0
 260 0008 FB71     		strb	r3, [r7, #7]
 321:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_CONTROL_REG_REMOVED)
 322:.\Generated_Source\PSoC5/Tx.c ****         if(0u != control)
 323:.\Generated_Source\PSoC5/Tx.c ****         {
 324:.\Generated_Source\PSoC5/Tx.c ****             /* Suppress compiler warning */
 325:.\Generated_Source\PSoC5/Tx.c ****         }
 326:.\Generated_Source\PSoC5/Tx.c ****     #else
 327:.\Generated_Source\PSoC5/Tx.c ****        Tx_CONTROL_REG = control;
 328:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_CONTROL_REG_REMOVED) */
 329:.\Generated_Source\PSoC5/Tx.c **** }
 261              		.loc 1 329 0
 262 000a 0C37     		adds	r7, r7, #12
 263 000c BD46     		mov	sp, r7
 264              		@ sp needed
 265 000e 5DF8047B 		ldr	r7, [sp], #4
 266 0012 7047     		bx	lr
 267              		.cfi_endproc
 268              	.LFE5:
 269              		.size	Tx_WriteControlRegister, .-Tx_WriteControlRegister
 270              		.section	.text.Tx_SetTxInterruptMode,"ax",%progbits
 271              		.align	2
 272              		.global	Tx_SetTxInterruptMode
 273              		.thumb
 274              		.thumb_func
 275              		.type	Tx_SetTxInterruptMode, %function
 276              	Tx_SetTxInterruptMode:
 277              	.LFB6:
 330:.\Generated_Source\PSoC5/Tx.c **** 
 331:.\Generated_Source\PSoC5/Tx.c **** 
 332:.\Generated_Source\PSoC5/Tx.c **** #if(Tx_RX_ENABLED || Tx_HD_ENABLED)
 333:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 334:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetRxInterruptMode
 335:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 336:.\Generated_Source\PSoC5/Tx.c ****     *
 337:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 338:.\Generated_Source\PSoC5/Tx.c ****     *  Configures the RX interrupt sources enabled.
 339:.\Generated_Source\PSoC5/Tx.c ****     *
 340:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 341:.\Generated_Source\PSoC5/Tx.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:.\Generated_Source\PSoC5/Tx.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:.\Generated_Source\PSoC5/Tx.c ****     *  combination of status register bit-masks shown below:
 344:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_BREAK            Interrupt on break.
 348:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_OVERRUN          Interrupt on overrun error.
 349:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_RX_STS_MRKSPC           Interrupt on address detect.
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 12


 351:.\Generated_Source\PSoC5/Tx.c ****     *
 352:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 353:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 354:.\Generated_Source\PSoC5/Tx.c ****     *
 355:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
 356:.\Generated_Source\PSoC5/Tx.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:.\Generated_Source\PSoC5/Tx.c ****     *
 358:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 359:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetRxInterruptMode(uint8 intSrc) 
 360:.\Generated_Source\PSoC5/Tx.c ****     {
 361:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXSTATUS_MASK_REG  = intSrc;
 362:.\Generated_Source\PSoC5/Tx.c ****     }
 363:.\Generated_Source\PSoC5/Tx.c **** 
 364:.\Generated_Source\PSoC5/Tx.c **** 
 365:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 366:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_ReadRxData
 367:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 368:.\Generated_Source\PSoC5/Tx.c ****     *
 369:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 370:.\Generated_Source\PSoC5/Tx.c ****     *  Returns the next byte of received data. This function returns data without
 371:.\Generated_Source\PSoC5/Tx.c ****     *  checking the status. You must check the status separately.
 372:.\Generated_Source\PSoC5/Tx.c ****     *
 373:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 374:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 375:.\Generated_Source\PSoC5/Tx.c ****     *
 376:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 377:.\Generated_Source\PSoC5/Tx.c ****     *  Received data from RX register
 378:.\Generated_Source\PSoC5/Tx.c ****     *
 379:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 380:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBuffer - RAM buffer pointer for save received data.
 381:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferWrite - cyclic index for write to rxBuffer,
 382:.\Generated_Source\PSoC5/Tx.c ****     *     checked to identify new data.
 383:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferRead - cyclic index for read from rxBuffer,
 384:.\Generated_Source\PSoC5/Tx.c ****     *     incremented after each byte has been read from buffer.
 385:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferLoopDetect - cleared if loop condition was detected
 386:.\Generated_Source\PSoC5/Tx.c ****     *     in RX ISR.
 387:.\Generated_Source\PSoC5/Tx.c ****     *
 388:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
 389:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 390:.\Generated_Source\PSoC5/Tx.c ****     *
 391:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 392:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_ReadRxData(void) 
 393:.\Generated_Source\PSoC5/Tx.c ****     {
 394:.\Generated_Source\PSoC5/Tx.c ****         uint8 rxData;
 395:.\Generated_Source\PSoC5/Tx.c **** 
 396:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 397:.\Generated_Source\PSoC5/Tx.c **** 
 398:.\Generated_Source\PSoC5/Tx.c ****         uint8 locRxBufferRead;
 399:.\Generated_Source\PSoC5/Tx.c ****         uint8 locRxBufferWrite;
 400:.\Generated_Source\PSoC5/Tx.c **** 
 401:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt */
 402:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableRxInt();
 403:.\Generated_Source\PSoC5/Tx.c **** 
 404:.\Generated_Source\PSoC5/Tx.c ****         locRxBufferRead  = Tx_rxBufferRead;
 405:.\Generated_Source\PSoC5/Tx.c ****         locRxBufferWrite = Tx_rxBufferWrite;
 406:.\Generated_Source\PSoC5/Tx.c **** 
 407:.\Generated_Source\PSoC5/Tx.c ****         if( (Tx_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 13


 408:.\Generated_Source\PSoC5/Tx.c ****         {
 409:.\Generated_Source\PSoC5/Tx.c ****             rxData = Tx_rxBuffer[locRxBufferRead];
 410:.\Generated_Source\PSoC5/Tx.c ****             locRxBufferRead++;
 411:.\Generated_Source\PSoC5/Tx.c **** 
 412:.\Generated_Source\PSoC5/Tx.c ****             if(locRxBufferRead >= Tx_RX_BUFFER_SIZE)
 413:.\Generated_Source\PSoC5/Tx.c ****             {
 414:.\Generated_Source\PSoC5/Tx.c ****                 locRxBufferRead = 0u;
 415:.\Generated_Source\PSoC5/Tx.c ****             }
 416:.\Generated_Source\PSoC5/Tx.c ****             /* Update the real pointer */
 417:.\Generated_Source\PSoC5/Tx.c ****             Tx_rxBufferRead = locRxBufferRead;
 418:.\Generated_Source\PSoC5/Tx.c **** 
 419:.\Generated_Source\PSoC5/Tx.c ****             if(Tx_rxBufferLoopDetect != 0u)
 420:.\Generated_Source\PSoC5/Tx.c ****             {
 421:.\Generated_Source\PSoC5/Tx.c ****                 Tx_rxBufferLoopDetect = 0u;
 422:.\Generated_Source\PSoC5/Tx.c ****                 #if ((Tx_RX_INTERRUPT_ENABLED) && (Tx_FLOW_CONTROL != 0u))
 423:.\Generated_Source\PSoC5/Tx.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:.\Generated_Source\PSoC5/Tx.c ****                     #if( Tx_HD_ENABLED )
 425:.\Generated_Source\PSoC5/Tx.c ****                         if((Tx_CONTROL_REG & Tx_CTRL_HD_SEND) == 0u)
 426:.\Generated_Source\PSoC5/Tx.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:.\Generated_Source\PSoC5/Tx.c ****                             *  configuration set, otherwise
 428:.\Generated_Source\PSoC5/Tx.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:.\Generated_Source\PSoC5/Tx.c ****                             */
 430:.\Generated_Source\PSoC5/Tx.c ****                             Tx_RXSTATUS_MASK_REG  |= Tx_RX_STS_FIFO_NOTEMPTY;
 431:.\Generated_Source\PSoC5/Tx.c ****                         }
 432:.\Generated_Source\PSoC5/Tx.c ****                     #else
 433:.\Generated_Source\PSoC5/Tx.c ****                         Tx_RXSTATUS_MASK_REG  |= Tx_RX_STS_FIFO_NOTEMPTY;
 434:.\Generated_Source\PSoC5/Tx.c ****                     #endif /* end Tx_HD_ENABLED */
 435:.\Generated_Source\PSoC5/Tx.c ****                 #endif /* ((Tx_RX_INTERRUPT_ENABLED) && (Tx_FLOW_CONTROL != 0u)) */
 436:.\Generated_Source\PSoC5/Tx.c ****             }
 437:.\Generated_Source\PSoC5/Tx.c ****         }
 438:.\Generated_Source\PSoC5/Tx.c ****         else
 439:.\Generated_Source\PSoC5/Tx.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:.\Generated_Source\PSoC5/Tx.c ****             rxData = Tx_RXDATA_REG;
 441:.\Generated_Source\PSoC5/Tx.c ****         }
 442:.\Generated_Source\PSoC5/Tx.c **** 
 443:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableRxInt();
 444:.\Generated_Source\PSoC5/Tx.c **** 
 445:.\Generated_Source\PSoC5/Tx.c ****     #else
 446:.\Generated_Source\PSoC5/Tx.c **** 
 447:.\Generated_Source\PSoC5/Tx.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:.\Generated_Source\PSoC5/Tx.c ****         rxData = Tx_RXDATA_REG;
 449:.\Generated_Source\PSoC5/Tx.c **** 
 450:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 451:.\Generated_Source\PSoC5/Tx.c **** 
 452:.\Generated_Source\PSoC5/Tx.c ****         return(rxData);
 453:.\Generated_Source\PSoC5/Tx.c ****     }
 454:.\Generated_Source\PSoC5/Tx.c **** 
 455:.\Generated_Source\PSoC5/Tx.c **** 
 456:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 457:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_ReadRxStatus
 458:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 459:.\Generated_Source\PSoC5/Tx.c ****     *
 460:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 461:.\Generated_Source\PSoC5/Tx.c ****     *  Returns the current state of the receiver status register and the software
 462:.\Generated_Source\PSoC5/Tx.c ****     *  buffer overflow status.
 463:.\Generated_Source\PSoC5/Tx.c ****     *
 464:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 14


 465:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 466:.\Generated_Source\PSoC5/Tx.c ****     *
 467:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 468:.\Generated_Source\PSoC5/Tx.c ****     *  Current state of the status register.
 469:.\Generated_Source\PSoC5/Tx.c ****     *
 470:.\Generated_Source\PSoC5/Tx.c ****     * Side Effect:
 471:.\Generated_Source\PSoC5/Tx.c ****     *  All status register bits are clear-on-read except
 472:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_RX_STS_FIFO_NOTEMPTY.
 473:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:.\Generated_Source\PSoC5/Tx.c ****     *  register read.
 475:.\Generated_Source\PSoC5/Tx.c ****     *
 476:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 477:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferOverflow - used to indicate overload condition.
 478:.\Generated_Source\PSoC5/Tx.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_rxBufferRead to write new data. This condition returned
 480:.\Generated_Source\PSoC5/Tx.c ****     *   and cleared to zero by this API as an
 481:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:.\Generated_Source\PSoC5/Tx.c ****     *   bits.
 483:.\Generated_Source\PSoC5/Tx.c ****     *
 484:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 485:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_ReadRxStatus(void) 
 486:.\Generated_Source\PSoC5/Tx.c ****     {
 487:.\Generated_Source\PSoC5/Tx.c ****         uint8 status;
 488:.\Generated_Source\PSoC5/Tx.c **** 
 489:.\Generated_Source\PSoC5/Tx.c ****         status = Tx_RXSTATUS_REG & Tx_RX_HW_MASK;
 490:.\Generated_Source\PSoC5/Tx.c **** 
 491:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 492:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_rxBufferOverflow != 0u)
 493:.\Generated_Source\PSoC5/Tx.c ****         {
 494:.\Generated_Source\PSoC5/Tx.c ****             status |= Tx_RX_STS_SOFT_BUFF_OVER;
 495:.\Generated_Source\PSoC5/Tx.c ****             Tx_rxBufferOverflow = 0u;
 496:.\Generated_Source\PSoC5/Tx.c ****         }
 497:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 498:.\Generated_Source\PSoC5/Tx.c **** 
 499:.\Generated_Source\PSoC5/Tx.c ****         return(status);
 500:.\Generated_Source\PSoC5/Tx.c ****     }
 501:.\Generated_Source\PSoC5/Tx.c **** 
 502:.\Generated_Source\PSoC5/Tx.c **** 
 503:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 504:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_GetChar
 505:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 506:.\Generated_Source\PSoC5/Tx.c ****     *
 507:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 508:.\Generated_Source\PSoC5/Tx.c ****     *  Returns the last received byte of data. Tx_GetChar() is
 509:.\Generated_Source\PSoC5/Tx.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:.\Generated_Source\PSoC5/Tx.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:.\Generated_Source\PSoC5/Tx.c ****     *
 512:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 513:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 514:.\Generated_Source\PSoC5/Tx.c ****     *
 515:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 516:.\Generated_Source\PSoC5/Tx.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:.\Generated_Source\PSoC5/Tx.c ****     *  A returned zero signifies an error condition or no data available.
 518:.\Generated_Source\PSoC5/Tx.c ****     *
 519:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 520:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBuffer - RAM buffer pointer for save received data.
 521:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferWrite - cyclic index for write to rxBuffer,
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 15


 522:.\Generated_Source\PSoC5/Tx.c ****     *     checked to identify new data.
 523:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferRead - cyclic index for read from rxBuffer,
 524:.\Generated_Source\PSoC5/Tx.c ****     *     incremented after each byte has been read from buffer.
 525:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferLoopDetect - cleared if loop condition was detected
 526:.\Generated_Source\PSoC5/Tx.c ****     *     in RX ISR.
 527:.\Generated_Source\PSoC5/Tx.c ****     *
 528:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
 529:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 530:.\Generated_Source\PSoC5/Tx.c ****     *
 531:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 532:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_GetChar(void) 
 533:.\Generated_Source\PSoC5/Tx.c ****     {
 534:.\Generated_Source\PSoC5/Tx.c ****         uint8 rxData = 0u;
 535:.\Generated_Source\PSoC5/Tx.c ****         uint8 rxStatus;
 536:.\Generated_Source\PSoC5/Tx.c **** 
 537:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 538:.\Generated_Source\PSoC5/Tx.c ****         uint8 locRxBufferRead;
 539:.\Generated_Source\PSoC5/Tx.c ****         uint8 locRxBufferWrite;
 540:.\Generated_Source\PSoC5/Tx.c **** 
 541:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt */
 542:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableRxInt();
 543:.\Generated_Source\PSoC5/Tx.c **** 
 544:.\Generated_Source\PSoC5/Tx.c ****         locRxBufferRead  = Tx_rxBufferRead;
 545:.\Generated_Source\PSoC5/Tx.c ****         locRxBufferWrite = Tx_rxBufferWrite;
 546:.\Generated_Source\PSoC5/Tx.c **** 
 547:.\Generated_Source\PSoC5/Tx.c ****         if( (Tx_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548:.\Generated_Source\PSoC5/Tx.c ****         {
 549:.\Generated_Source\PSoC5/Tx.c ****             rxData = Tx_rxBuffer[locRxBufferRead];
 550:.\Generated_Source\PSoC5/Tx.c ****             locRxBufferRead++;
 551:.\Generated_Source\PSoC5/Tx.c ****             if(locRxBufferRead >= Tx_RX_BUFFER_SIZE)
 552:.\Generated_Source\PSoC5/Tx.c ****             {
 553:.\Generated_Source\PSoC5/Tx.c ****                 locRxBufferRead = 0u;
 554:.\Generated_Source\PSoC5/Tx.c ****             }
 555:.\Generated_Source\PSoC5/Tx.c ****             /* Update the real pointer */
 556:.\Generated_Source\PSoC5/Tx.c ****             Tx_rxBufferRead = locRxBufferRead;
 557:.\Generated_Source\PSoC5/Tx.c **** 
 558:.\Generated_Source\PSoC5/Tx.c ****             if(Tx_rxBufferLoopDetect != 0u)
 559:.\Generated_Source\PSoC5/Tx.c ****             {
 560:.\Generated_Source\PSoC5/Tx.c ****                 Tx_rxBufferLoopDetect = 0u;
 561:.\Generated_Source\PSoC5/Tx.c ****                 #if( (Tx_RX_INTERRUPT_ENABLED) && (Tx_FLOW_CONTROL != 0u) )
 562:.\Generated_Source\PSoC5/Tx.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:.\Generated_Source\PSoC5/Tx.c ****                     #if( Tx_HD_ENABLED )
 564:.\Generated_Source\PSoC5/Tx.c ****                         if((Tx_CONTROL_REG & Tx_CTRL_HD_SEND) == 0u)
 565:.\Generated_Source\PSoC5/Tx.c ****                         {   /* In Half duplex mode return RX mask only if
 566:.\Generated_Source\PSoC5/Tx.c ****                             *  RX configuration set, otherwise
 567:.\Generated_Source\PSoC5/Tx.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:.\Generated_Source\PSoC5/Tx.c ****                             */
 569:.\Generated_Source\PSoC5/Tx.c ****                             Tx_RXSTATUS_MASK_REG |= Tx_RX_STS_FIFO_NOTEMPTY;
 570:.\Generated_Source\PSoC5/Tx.c ****                         }
 571:.\Generated_Source\PSoC5/Tx.c ****                     #else
 572:.\Generated_Source\PSoC5/Tx.c ****                         Tx_RXSTATUS_MASK_REG |= Tx_RX_STS_FIFO_NOTEMPTY;
 573:.\Generated_Source\PSoC5/Tx.c ****                     #endif /* end Tx_HD_ENABLED */
 574:.\Generated_Source\PSoC5/Tx.c ****                 #endif /* Tx_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:.\Generated_Source\PSoC5/Tx.c ****             }
 576:.\Generated_Source\PSoC5/Tx.c **** 
 577:.\Generated_Source\PSoC5/Tx.c ****         }
 578:.\Generated_Source\PSoC5/Tx.c ****         else
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 16


 579:.\Generated_Source\PSoC5/Tx.c ****         {   rxStatus = Tx_RXSTATUS_REG;
 580:.\Generated_Source\PSoC5/Tx.c ****             if((rxStatus & Tx_RX_STS_FIFO_NOTEMPTY) != 0u)
 581:.\Generated_Source\PSoC5/Tx.c ****             {   /* Read received data from FIFO */
 582:.\Generated_Source\PSoC5/Tx.c ****                 rxData = Tx_RXDATA_REG;
 583:.\Generated_Source\PSoC5/Tx.c ****                 /*Check status on error*/
 584:.\Generated_Source\PSoC5/Tx.c ****                 if((rxStatus & (Tx_RX_STS_BREAK | Tx_RX_STS_PAR_ERROR |
 585:.\Generated_Source\PSoC5/Tx.c ****                                 Tx_RX_STS_STOP_ERROR | Tx_RX_STS_OVERRUN)) != 0u)
 586:.\Generated_Source\PSoC5/Tx.c ****                 {
 587:.\Generated_Source\PSoC5/Tx.c ****                     rxData = 0u;
 588:.\Generated_Source\PSoC5/Tx.c ****                 }
 589:.\Generated_Source\PSoC5/Tx.c ****             }
 590:.\Generated_Source\PSoC5/Tx.c ****         }
 591:.\Generated_Source\PSoC5/Tx.c **** 
 592:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableRxInt();
 593:.\Generated_Source\PSoC5/Tx.c **** 
 594:.\Generated_Source\PSoC5/Tx.c ****     #else
 595:.\Generated_Source\PSoC5/Tx.c **** 
 596:.\Generated_Source\PSoC5/Tx.c ****         rxStatus =Tx_RXSTATUS_REG;
 597:.\Generated_Source\PSoC5/Tx.c ****         if((rxStatus & Tx_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:.\Generated_Source\PSoC5/Tx.c ****         {
 599:.\Generated_Source\PSoC5/Tx.c ****             /* Read received data from FIFO */
 600:.\Generated_Source\PSoC5/Tx.c ****             rxData = Tx_RXDATA_REG;
 601:.\Generated_Source\PSoC5/Tx.c **** 
 602:.\Generated_Source\PSoC5/Tx.c ****             /*Check status on error*/
 603:.\Generated_Source\PSoC5/Tx.c ****             if((rxStatus & (Tx_RX_STS_BREAK | Tx_RX_STS_PAR_ERROR |
 604:.\Generated_Source\PSoC5/Tx.c ****                             Tx_RX_STS_STOP_ERROR | Tx_RX_STS_OVERRUN)) != 0u)
 605:.\Generated_Source\PSoC5/Tx.c ****             {
 606:.\Generated_Source\PSoC5/Tx.c ****                 rxData = 0u;
 607:.\Generated_Source\PSoC5/Tx.c ****             }
 608:.\Generated_Source\PSoC5/Tx.c ****         }
 609:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 610:.\Generated_Source\PSoC5/Tx.c **** 
 611:.\Generated_Source\PSoC5/Tx.c ****         return(rxData);
 612:.\Generated_Source\PSoC5/Tx.c ****     }
 613:.\Generated_Source\PSoC5/Tx.c **** 
 614:.\Generated_Source\PSoC5/Tx.c **** 
 615:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 616:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_GetByte
 617:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 618:.\Generated_Source\PSoC5/Tx.c ****     *
 619:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 620:.\Generated_Source\PSoC5/Tx.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:.\Generated_Source\PSoC5/Tx.c ****     *  condition.
 622:.\Generated_Source\PSoC5/Tx.c ****     *
 623:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 624:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 625:.\Generated_Source\PSoC5/Tx.c ****     *
 626:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 627:.\Generated_Source\PSoC5/Tx.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:.\Generated_Source\PSoC5/Tx.c ****     *  an error has occurred.
 629:.\Generated_Source\PSoC5/Tx.c ****     *
 630:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
 631:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 632:.\Generated_Source\PSoC5/Tx.c ****     *
 633:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 634:.\Generated_Source\PSoC5/Tx.c ****     uint16 Tx_GetByte(void) 
 635:.\Generated_Source\PSoC5/Tx.c ****     {
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 17


 636:.\Generated_Source\PSoC5/Tx.c ****         
 637:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 638:.\Generated_Source\PSoC5/Tx.c ****         uint16 locErrorStatus;
 639:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt */
 640:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableRxInt();
 641:.\Generated_Source\PSoC5/Tx.c ****         locErrorStatus = (uint16)Tx_errorStatus;
 642:.\Generated_Source\PSoC5/Tx.c ****         Tx_errorStatus = 0u;
 643:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableRxInt();
 644:.\Generated_Source\PSoC5/Tx.c ****         return ( (uint16)(locErrorStatus << 8u) | Tx_ReadRxData() );
 645:.\Generated_Source\PSoC5/Tx.c ****     #else
 646:.\Generated_Source\PSoC5/Tx.c ****         return ( ((uint16)Tx_ReadRxStatus() << 8u) | Tx_ReadRxData() );
 647:.\Generated_Source\PSoC5/Tx.c ****     #endif /* Tx_RX_INTERRUPT_ENABLED */
 648:.\Generated_Source\PSoC5/Tx.c ****         
 649:.\Generated_Source\PSoC5/Tx.c ****     }
 650:.\Generated_Source\PSoC5/Tx.c **** 
 651:.\Generated_Source\PSoC5/Tx.c **** 
 652:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 653:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_GetRxBufferSize
 654:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 655:.\Generated_Source\PSoC5/Tx.c ****     *
 656:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 657:.\Generated_Source\PSoC5/Tx.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:.\Generated_Source\PSoC5/Tx.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:.\Generated_Source\PSoC5/Tx.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:.\Generated_Source\PSoC5/Tx.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:.\Generated_Source\PSoC5/Tx.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:.\Generated_Source\PSoC5/Tx.c ****     *    account.
 663:.\Generated_Source\PSoC5/Tx.c ****     *
 664:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 665:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 666:.\Generated_Source\PSoC5/Tx.c ****     *
 667:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 668:.\Generated_Source\PSoC5/Tx.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:.\Generated_Source\PSoC5/Tx.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:.\Generated_Source\PSoC5/Tx.c ****     *
 671:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 672:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferWrite - used to calculate left bytes.
 673:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferRead - used to calculate left bytes.
 674:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferLoopDetect - checked to decide left bytes amount.
 675:.\Generated_Source\PSoC5/Tx.c ****     *
 676:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
 677:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 678:.\Generated_Source\PSoC5/Tx.c ****     *
 679:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
 680:.\Generated_Source\PSoC5/Tx.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:.\Generated_Source\PSoC5/Tx.c ****     *
 682:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 683:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_GetRxBufferSize(void)
 684:.\Generated_Source\PSoC5/Tx.c ****                                                             
 685:.\Generated_Source\PSoC5/Tx.c ****     {
 686:.\Generated_Source\PSoC5/Tx.c ****         uint8 size;
 687:.\Generated_Source\PSoC5/Tx.c **** 
 688:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 689:.\Generated_Source\PSoC5/Tx.c **** 
 690:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt */
 691:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableRxInt();
 692:.\Generated_Source\PSoC5/Tx.c **** 
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 18


 693:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_rxBufferRead == Tx_rxBufferWrite)
 694:.\Generated_Source\PSoC5/Tx.c ****         {
 695:.\Generated_Source\PSoC5/Tx.c ****             if(Tx_rxBufferLoopDetect != 0u)
 696:.\Generated_Source\PSoC5/Tx.c ****             {
 697:.\Generated_Source\PSoC5/Tx.c ****                 size = Tx_RX_BUFFER_SIZE;
 698:.\Generated_Source\PSoC5/Tx.c ****             }
 699:.\Generated_Source\PSoC5/Tx.c ****             else
 700:.\Generated_Source\PSoC5/Tx.c ****             {
 701:.\Generated_Source\PSoC5/Tx.c ****                 size = 0u;
 702:.\Generated_Source\PSoC5/Tx.c ****             }
 703:.\Generated_Source\PSoC5/Tx.c ****         }
 704:.\Generated_Source\PSoC5/Tx.c ****         else if(Tx_rxBufferRead < Tx_rxBufferWrite)
 705:.\Generated_Source\PSoC5/Tx.c ****         {
 706:.\Generated_Source\PSoC5/Tx.c ****             size = (Tx_rxBufferWrite - Tx_rxBufferRead);
 707:.\Generated_Source\PSoC5/Tx.c ****         }
 708:.\Generated_Source\PSoC5/Tx.c ****         else
 709:.\Generated_Source\PSoC5/Tx.c ****         {
 710:.\Generated_Source\PSoC5/Tx.c ****             size = (Tx_RX_BUFFER_SIZE - Tx_rxBufferRead) + Tx_rxBufferWrite;
 711:.\Generated_Source\PSoC5/Tx.c ****         }
 712:.\Generated_Source\PSoC5/Tx.c **** 
 713:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableRxInt();
 714:.\Generated_Source\PSoC5/Tx.c **** 
 715:.\Generated_Source\PSoC5/Tx.c ****     #else
 716:.\Generated_Source\PSoC5/Tx.c **** 
 717:.\Generated_Source\PSoC5/Tx.c ****         /* We can only know if there is data in the fifo. */
 718:.\Generated_Source\PSoC5/Tx.c ****         size = ((Tx_RXSTATUS_REG & Tx_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:.\Generated_Source\PSoC5/Tx.c **** 
 720:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 721:.\Generated_Source\PSoC5/Tx.c **** 
 722:.\Generated_Source\PSoC5/Tx.c ****         return(size);
 723:.\Generated_Source\PSoC5/Tx.c ****     }
 724:.\Generated_Source\PSoC5/Tx.c **** 
 725:.\Generated_Source\PSoC5/Tx.c **** 
 726:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 727:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_ClearRxBuffer
 728:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 729:.\Generated_Source\PSoC5/Tx.c ****     *
 730:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 731:.\Generated_Source\PSoC5/Tx.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:.\Generated_Source\PSoC5/Tx.c ****     *
 733:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 734:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 735:.\Generated_Source\PSoC5/Tx.c ****     *
 736:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 737:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 738:.\Generated_Source\PSoC5/Tx.c ****     *
 739:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 740:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferWrite - cleared to zero.
 741:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferRead - cleared to zero.
 742:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferLoopDetect - cleared to zero.
 743:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxBufferOverflow - cleared to zero.
 744:.\Generated_Source\PSoC5/Tx.c ****     *
 745:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
 746:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 747:.\Generated_Source\PSoC5/Tx.c ****     *
 748:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
 749:.\Generated_Source\PSoC5/Tx.c ****     *  Setting the pointers to zero makes the system believe there is no data to
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 19


 750:.\Generated_Source\PSoC5/Tx.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:.\Generated_Source\PSoC5/Tx.c ****     *  have remained in the RAM.
 752:.\Generated_Source\PSoC5/Tx.c ****     *
 753:.\Generated_Source\PSoC5/Tx.c ****     * Side Effects:
 754:.\Generated_Source\PSoC5/Tx.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:.\Generated_Source\PSoC5/Tx.c ****     *
 756:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC5/Tx.c ****     void Tx_ClearRxBuffer(void) 
 758:.\Generated_Source\PSoC5/Tx.c ****     {
 759:.\Generated_Source\PSoC5/Tx.c ****         uint8 enableInterrupts;
 760:.\Generated_Source\PSoC5/Tx.c **** 
 761:.\Generated_Source\PSoC5/Tx.c ****         /* Clear the HW FIFO */
 762:.\Generated_Source\PSoC5/Tx.c ****         enableInterrupts = CyEnterCriticalSection();
 763:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXDATA_AUX_CTL_REG |= (uint8)  Tx_RX_FIFO_CLR;
 764:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXDATA_AUX_CTL_REG &= (uint8) ~Tx_RX_FIFO_CLR;
 765:.\Generated_Source\PSoC5/Tx.c ****         CyExitCriticalSection(enableInterrupts);
 766:.\Generated_Source\PSoC5/Tx.c **** 
 767:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_RX_INTERRUPT_ENABLED)
 768:.\Generated_Source\PSoC5/Tx.c **** 
 769:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt. */
 770:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableRxInt();
 771:.\Generated_Source\PSoC5/Tx.c **** 
 772:.\Generated_Source\PSoC5/Tx.c ****         Tx_rxBufferRead = 0u;
 773:.\Generated_Source\PSoC5/Tx.c ****         Tx_rxBufferWrite = 0u;
 774:.\Generated_Source\PSoC5/Tx.c ****         Tx_rxBufferLoopDetect = 0u;
 775:.\Generated_Source\PSoC5/Tx.c ****         Tx_rxBufferOverflow = 0u;
 776:.\Generated_Source\PSoC5/Tx.c **** 
 777:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableRxInt();
 778:.\Generated_Source\PSoC5/Tx.c **** 
 779:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_RX_INTERRUPT_ENABLED) */
 780:.\Generated_Source\PSoC5/Tx.c **** 
 781:.\Generated_Source\PSoC5/Tx.c ****     }
 782:.\Generated_Source\PSoC5/Tx.c **** 
 783:.\Generated_Source\PSoC5/Tx.c **** 
 784:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 785:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetRxAddressMode
 786:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 787:.\Generated_Source\PSoC5/Tx.c ****     *
 788:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 789:.\Generated_Source\PSoC5/Tx.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:.\Generated_Source\PSoC5/Tx.c ****     *  UART.
 791:.\Generated_Source\PSoC5/Tx.c ****     *
 792:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 793:.\Generated_Source\PSoC5/Tx.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:.\Generated_Source\PSoC5/Tx.c ****     *  Tx__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:.\Generated_Source\PSoC5/Tx.c ****     *                                               detection
 796:.\Generated_Source\PSoC5/Tx.c ****     *  Tx__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:.\Generated_Source\PSoC5/Tx.c ****     *                                               address detection
 798:.\Generated_Source\PSoC5/Tx.c ****     *  Tx__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:.\Generated_Source\PSoC5/Tx.c ****     *                                               detection
 800:.\Generated_Source\PSoC5/Tx.c ****     *  Tx__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:.\Generated_Source\PSoC5/Tx.c ****     *                                               address detection
 802:.\Generated_Source\PSoC5/Tx.c ****     *  Tx__B_UART__AM_NONE - No address detection
 803:.\Generated_Source\PSoC5/Tx.c ****     *
 804:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 805:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 806:.\Generated_Source\PSoC5/Tx.c ****     *
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 20


 807:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 808:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxAddressMode - the parameter stored in this variable for
 809:.\Generated_Source\PSoC5/Tx.c ****     *   the farther usage in RX ISR.
 810:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_rxAddressDetected - set to initial state (0).
 811:.\Generated_Source\PSoC5/Tx.c ****     *
 812:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 813:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetRxAddressMode(uint8 addressMode)
 814:.\Generated_Source\PSoC5/Tx.c ****                                                         
 815:.\Generated_Source\PSoC5/Tx.c ****     {
 816:.\Generated_Source\PSoC5/Tx.c ****         #if(Tx_RXHW_ADDRESS_ENABLED)
 817:.\Generated_Source\PSoC5/Tx.c ****             #if(Tx_CONTROL_REG_REMOVED)
 818:.\Generated_Source\PSoC5/Tx.c ****                 if(0u != addressMode)
 819:.\Generated_Source\PSoC5/Tx.c ****                 {
 820:.\Generated_Source\PSoC5/Tx.c ****                     /* Suppress compiler warning */
 821:.\Generated_Source\PSoC5/Tx.c ****                 }
 822:.\Generated_Source\PSoC5/Tx.c ****             #else /* Tx_CONTROL_REG_REMOVED */
 823:.\Generated_Source\PSoC5/Tx.c ****                 uint8 tmpCtrl;
 824:.\Generated_Source\PSoC5/Tx.c ****                 tmpCtrl = Tx_CONTROL_REG & (uint8)~Tx_CTRL_RXADDR_MODE_MASK;
 825:.\Generated_Source\PSoC5/Tx.c ****                 tmpCtrl |= (uint8)(addressMode << Tx_CTRL_RXADDR_MODE0_SHIFT);
 826:.\Generated_Source\PSoC5/Tx.c ****                 Tx_CONTROL_REG = tmpCtrl;
 827:.\Generated_Source\PSoC5/Tx.c **** 
 828:.\Generated_Source\PSoC5/Tx.c ****                 #if(Tx_RX_INTERRUPT_ENABLED && \
 829:.\Generated_Source\PSoC5/Tx.c ****                    (Tx_RXBUFFERSIZE > Tx_FIFO_LENGTH) )
 830:.\Generated_Source\PSoC5/Tx.c ****                     Tx_rxAddressMode = addressMode;
 831:.\Generated_Source\PSoC5/Tx.c ****                     Tx_rxAddressDetected = 0u;
 832:.\Generated_Source\PSoC5/Tx.c ****                 #endif /* End Tx_RXBUFFERSIZE > Tx_FIFO_LENGTH*/
 833:.\Generated_Source\PSoC5/Tx.c ****             #endif /* End Tx_CONTROL_REG_REMOVED */
 834:.\Generated_Source\PSoC5/Tx.c ****         #else /* Tx_RXHW_ADDRESS_ENABLED */
 835:.\Generated_Source\PSoC5/Tx.c ****             if(0u != addressMode)
 836:.\Generated_Source\PSoC5/Tx.c ****             {
 837:.\Generated_Source\PSoC5/Tx.c ****                 /* Suppress compiler warning */
 838:.\Generated_Source\PSoC5/Tx.c ****             }
 839:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_RXHW_ADDRESS_ENABLED */
 840:.\Generated_Source\PSoC5/Tx.c ****     }
 841:.\Generated_Source\PSoC5/Tx.c **** 
 842:.\Generated_Source\PSoC5/Tx.c **** 
 843:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 844:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetRxAddress1
 845:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 846:.\Generated_Source\PSoC5/Tx.c ****     *
 847:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 848:.\Generated_Source\PSoC5/Tx.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:.\Generated_Source\PSoC5/Tx.c ****     *
 850:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 851:.\Generated_Source\PSoC5/Tx.c ****     *  address: Address #1 for hardware address detection.
 852:.\Generated_Source\PSoC5/Tx.c ****     *
 853:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 854:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 855:.\Generated_Source\PSoC5/Tx.c ****     *
 856:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 857:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetRxAddress1(uint8 address) 
 858:.\Generated_Source\PSoC5/Tx.c ****     {
 859:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXADDRESS1_REG = address;
 860:.\Generated_Source\PSoC5/Tx.c ****     }
 861:.\Generated_Source\PSoC5/Tx.c **** 
 862:.\Generated_Source\PSoC5/Tx.c **** 
 863:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 21


 864:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetRxAddress2
 865:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 866:.\Generated_Source\PSoC5/Tx.c ****     *
 867:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 868:.\Generated_Source\PSoC5/Tx.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:.\Generated_Source\PSoC5/Tx.c ****     *
 870:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 871:.\Generated_Source\PSoC5/Tx.c ****     *  address: Address #2 for hardware address detection.
 872:.\Generated_Source\PSoC5/Tx.c ****     *
 873:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 874:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 875:.\Generated_Source\PSoC5/Tx.c ****     *
 876:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 877:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetRxAddress2(uint8 address) 
 878:.\Generated_Source\PSoC5/Tx.c ****     {
 879:.\Generated_Source\PSoC5/Tx.c ****         Tx_RXADDRESS2_REG = address;
 880:.\Generated_Source\PSoC5/Tx.c ****     }
 881:.\Generated_Source\PSoC5/Tx.c **** 
 882:.\Generated_Source\PSoC5/Tx.c **** #endif  /* Tx_RX_ENABLED || Tx_HD_ENABLED*/
 883:.\Generated_Source\PSoC5/Tx.c **** 
 884:.\Generated_Source\PSoC5/Tx.c **** 
 885:.\Generated_Source\PSoC5/Tx.c **** #if( (Tx_TX_ENABLED) || (Tx_HD_ENABLED) )
 886:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 887:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetTxInterruptMode
 888:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 889:.\Generated_Source\PSoC5/Tx.c ****     *
 890:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 891:.\Generated_Source\PSoC5/Tx.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:.\Generated_Source\PSoC5/Tx.c ****     *  interrupt.
 893:.\Generated_Source\PSoC5/Tx.c ****     *
 894:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 895:.\Generated_Source\PSoC5/Tx.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:.\Generated_Source\PSoC5/Tx.c ****     *
 901:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 902:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 903:.\Generated_Source\PSoC5/Tx.c ****     *
 904:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
 905:.\Generated_Source\PSoC5/Tx.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:.\Generated_Source\PSoC5/Tx.c ****     *
 907:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 908:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetTxInterruptMode(uint8 intSrc) 
 909:.\Generated_Source\PSoC5/Tx.c ****     {
 278              		.loc 1 909 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283 0000 80B4     		push	{r7}
 284              		.cfi_def_cfa_offset 4
 285              		.cfi_offset 7, -4
 286 0002 83B0     		sub	sp, sp, #12
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 22


 289              		.cfi_def_cfa_register 7
 290 0006 0346     		mov	r3, r0
 291 0008 FB71     		strb	r3, [r7, #7]
 910:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXSTATUS_MASK_REG = intSrc;
 292              		.loc 1 910 0
 293 000a 044B     		ldr	r3, .L18
 294 000c FA79     		ldrb	r2, [r7, #7]
 295 000e 1A70     		strb	r2, [r3]
 911:.\Generated_Source\PSoC5/Tx.c ****     }
 296              		.loc 1 911 0
 297 0010 0C37     		adds	r7, r7, #12
 298 0012 BD46     		mov	sp, r7
 299              		@ sp needed
 300 0014 5DF8047B 		ldr	r7, [sp], #4
 301 0018 7047     		bx	lr
 302              	.L19:
 303 001a 00BF     		.align	2
 304              	.L18:
 305 001c 8C640040 		.word	1073767564
 306              		.cfi_endproc
 307              	.LFE6:
 308              		.size	Tx_SetTxInterruptMode, .-Tx_SetTxInterruptMode
 309              		.section	.text.Tx_WriteTxData,"ax",%progbits
 310              		.align	2
 311              		.global	Tx_WriteTxData
 312              		.thumb
 313              		.thumb_func
 314              		.type	Tx_WriteTxData, %function
 315              	Tx_WriteTxData:
 316              	.LFB7:
 912:.\Generated_Source\PSoC5/Tx.c **** 
 913:.\Generated_Source\PSoC5/Tx.c **** 
 914:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 915:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_WriteTxData
 916:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 917:.\Generated_Source\PSoC5/Tx.c ****     *
 918:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 919:.\Generated_Source\PSoC5/Tx.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:.\Generated_Source\PSoC5/Tx.c ****     *  available without checking the TX status register. You must check status
 921:.\Generated_Source\PSoC5/Tx.c ****     *  separately.
 922:.\Generated_Source\PSoC5/Tx.c ****     *
 923:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 924:.\Generated_Source\PSoC5/Tx.c ****     *  txDataByte: data byte
 925:.\Generated_Source\PSoC5/Tx.c ****     *
 926:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 927:.\Generated_Source\PSoC5/Tx.c ****     * None.
 928:.\Generated_Source\PSoC5/Tx.c ****     *
 929:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
 930:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBuffer - RAM buffer pointer for save data for transmission
 931:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferWrite - cyclic index for write to txBuffer,
 932:.\Generated_Source\PSoC5/Tx.c ****     *    incremented after each byte saved to buffer.
 933:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferRead - cyclic index for read from txBuffer,
 934:.\Generated_Source\PSoC5/Tx.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
 936:.\Generated_Source\PSoC5/Tx.c ****     *    initialized.
 937:.\Generated_Source\PSoC5/Tx.c ****     *
 938:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 23


 939:.\Generated_Source\PSoC5/Tx.c ****     *  No.
 940:.\Generated_Source\PSoC5/Tx.c ****     *
 941:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
 942:.\Generated_Source\PSoC5/Tx.c ****     void Tx_WriteTxData(uint8 txDataByte) 
 943:.\Generated_Source\PSoC5/Tx.c ****     {
 317              		.loc 1 943 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 8
 320              		@ frame_needed = 1, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 322 0000 80B4     		push	{r7}
 323              		.cfi_def_cfa_offset 4
 324              		.cfi_offset 7, -4
 325 0002 83B0     		sub	sp, sp, #12
 326              		.cfi_def_cfa_offset 16
 327 0004 00AF     		add	r7, sp, #0
 328              		.cfi_def_cfa_register 7
 329 0006 0346     		mov	r3, r0
 330 0008 FB71     		strb	r3, [r7, #7]
 944:.\Generated_Source\PSoC5/Tx.c ****         /* If not Initialized then skip this function*/
 945:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_initVar != 0u)
 331              		.loc 1 945 0
 332 000a 064B     		ldr	r3, .L22
 333 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 334 000e 002B     		cmp	r3, #0
 335 0010 02D0     		beq	.L20
 946:.\Generated_Source\PSoC5/Tx.c ****         {
 947:.\Generated_Source\PSoC5/Tx.c ****         #if (Tx_TX_INTERRUPT_ENABLED)
 948:.\Generated_Source\PSoC5/Tx.c **** 
 949:.\Generated_Source\PSoC5/Tx.c ****             /* Protect variables that could change on interrupt. */
 950:.\Generated_Source\PSoC5/Tx.c ****             Tx_DisableTxInt();
 951:.\Generated_Source\PSoC5/Tx.c **** 
 952:.\Generated_Source\PSoC5/Tx.c ****             if( (Tx_txBufferRead == Tx_txBufferWrite) &&
 953:.\Generated_Source\PSoC5/Tx.c ****                 ((Tx_TXSTATUS_REG & Tx_TX_STS_FIFO_FULL) == 0u) )
 954:.\Generated_Source\PSoC5/Tx.c ****             {
 955:.\Generated_Source\PSoC5/Tx.c ****                 /* Add directly to the FIFO. */
 956:.\Generated_Source\PSoC5/Tx.c ****                 Tx_TXDATA_REG = txDataByte;
 957:.\Generated_Source\PSoC5/Tx.c ****             }
 958:.\Generated_Source\PSoC5/Tx.c ****             else
 959:.\Generated_Source\PSoC5/Tx.c ****             {
 960:.\Generated_Source\PSoC5/Tx.c ****                 if(Tx_txBufferWrite >= Tx_TX_BUFFER_SIZE)
 961:.\Generated_Source\PSoC5/Tx.c ****                 {
 962:.\Generated_Source\PSoC5/Tx.c ****                     Tx_txBufferWrite = 0u;
 963:.\Generated_Source\PSoC5/Tx.c ****                 }
 964:.\Generated_Source\PSoC5/Tx.c **** 
 965:.\Generated_Source\PSoC5/Tx.c ****                 Tx_txBuffer[Tx_txBufferWrite] = txDataByte;
 966:.\Generated_Source\PSoC5/Tx.c **** 
 967:.\Generated_Source\PSoC5/Tx.c ****                 /* Add to the software buffer. */
 968:.\Generated_Source\PSoC5/Tx.c ****                 Tx_txBufferWrite++;
 969:.\Generated_Source\PSoC5/Tx.c ****             }
 970:.\Generated_Source\PSoC5/Tx.c **** 
 971:.\Generated_Source\PSoC5/Tx.c ****             Tx_EnableTxInt();
 972:.\Generated_Source\PSoC5/Tx.c **** 
 973:.\Generated_Source\PSoC5/Tx.c ****         #else
 974:.\Generated_Source\PSoC5/Tx.c **** 
 975:.\Generated_Source\PSoC5/Tx.c ****             /* Add directly to the FIFO. */
 976:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXDATA_REG = txDataByte;
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 24


 336              		.loc 1 976 0
 337 0012 054B     		ldr	r3, .L22+4
 338 0014 FA79     		ldrb	r2, [r7, #7]
 339 0016 1A70     		strb	r2, [r3]
 340              	.L20:
 977:.\Generated_Source\PSoC5/Tx.c **** 
 978:.\Generated_Source\PSoC5/Tx.c ****         #endif /*(Tx_TX_INTERRUPT_ENABLED) */
 979:.\Generated_Source\PSoC5/Tx.c ****         }
 980:.\Generated_Source\PSoC5/Tx.c ****     }
 341              		.loc 1 980 0
 342 0018 0C37     		adds	r7, r7, #12
 343 001a BD46     		mov	sp, r7
 344              		@ sp needed
 345 001c 5DF8047B 		ldr	r7, [sp], #4
 346 0020 7047     		bx	lr
 347              	.L23:
 348 0022 00BF     		.align	2
 349              	.L22:
 350 0024 00000000 		.word	Tx_initVar
 351 0028 4C640040 		.word	1073767500
 352              		.cfi_endproc
 353              	.LFE7:
 354              		.size	Tx_WriteTxData, .-Tx_WriteTxData
 355              		.section	.text.Tx_ReadTxStatus,"ax",%progbits
 356              		.align	2
 357              		.global	Tx_ReadTxStatus
 358              		.thumb
 359              		.thumb_func
 360              		.type	Tx_ReadTxStatus, %function
 361              	Tx_ReadTxStatus:
 362              	.LFB8:
 981:.\Generated_Source\PSoC5/Tx.c **** 
 982:.\Generated_Source\PSoC5/Tx.c **** 
 983:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
 984:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_ReadTxStatus
 985:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
 986:.\Generated_Source\PSoC5/Tx.c ****     *
 987:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
 988:.\Generated_Source\PSoC5/Tx.c ****     *  Reads the status register for the TX portion of the UART.
 989:.\Generated_Source\PSoC5/Tx.c ****     *
 990:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
 991:.\Generated_Source\PSoC5/Tx.c ****     *  None.
 992:.\Generated_Source\PSoC5/Tx.c ****     *
 993:.\Generated_Source\PSoC5/Tx.c ****     * Return:
 994:.\Generated_Source\PSoC5/Tx.c ****     *  Contents of the status register
 995:.\Generated_Source\PSoC5/Tx.c ****     *
 996:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
 997:.\Generated_Source\PSoC5/Tx.c ****     *  This function reads the TX status register, which is cleared on read.
 998:.\Generated_Source\PSoC5/Tx.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:.\Generated_Source\PSoC5/Tx.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:.\Generated_Source\PSoC5/Tx.c ****     *  and must be handled accordingly.
1001:.\Generated_Source\PSoC5/Tx.c ****     *
1002:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1003:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_ReadTxStatus(void) 
1004:.\Generated_Source\PSoC5/Tx.c ****     {
 363              		.loc 1 1004 0
 364              		.cfi_startproc
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 25


 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 368 0000 80B4     		push	{r7}
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 7, -4
 371 0002 00AF     		add	r7, sp, #0
 372              		.cfi_def_cfa_register 7
1005:.\Generated_Source\PSoC5/Tx.c ****         return(Tx_TXSTATUS_REG);
 373              		.loc 1 1005 0
 374 0004 034B     		ldr	r3, .L26
 375 0006 1B78     		ldrb	r3, [r3]
 376 0008 DBB2     		uxtb	r3, r3
1006:.\Generated_Source\PSoC5/Tx.c ****     }
 377              		.loc 1 1006 0
 378 000a 1846     		mov	r0, r3
 379 000c BD46     		mov	sp, r7
 380              		@ sp needed
 381 000e 5DF8047B 		ldr	r7, [sp], #4
 382 0012 7047     		bx	lr
 383              	.L27:
 384              		.align	2
 385              	.L26:
 386 0014 6C640040 		.word	1073767532
 387              		.cfi_endproc
 388              	.LFE8:
 389              		.size	Tx_ReadTxStatus, .-Tx_ReadTxStatus
 390              		.section	.text.Tx_PutChar,"ax",%progbits
 391              		.align	2
 392              		.global	Tx_PutChar
 393              		.thumb
 394              		.thumb_func
 395              		.type	Tx_PutChar, %function
 396              	Tx_PutChar:
 397              	.LFB9:
1007:.\Generated_Source\PSoC5/Tx.c **** 
1008:.\Generated_Source\PSoC5/Tx.c **** 
1009:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1010:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_PutChar
1011:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1012:.\Generated_Source\PSoC5/Tx.c ****     *
1013:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1014:.\Generated_Source\PSoC5/Tx.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:.\Generated_Source\PSoC5/Tx.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:.\Generated_Source\PSoC5/Tx.c ****     *  hold the data.
1017:.\Generated_Source\PSoC5/Tx.c ****     *
1018:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1019:.\Generated_Source\PSoC5/Tx.c ****     *  txDataByte: Byte containing the data to transmit
1020:.\Generated_Source\PSoC5/Tx.c ****     *
1021:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1022:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1023:.\Generated_Source\PSoC5/Tx.c ****     *
1024:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1025:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBuffer - RAM buffer pointer for save data for transmission
1026:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferWrite - cyclic index for write to txBuffer,
1027:.\Generated_Source\PSoC5/Tx.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:.\Generated_Source\PSoC5/Tx.c ****     *     saved to buffer.
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 26


1029:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferRead - cyclic index for read from txBuffer,
1030:.\Generated_Source\PSoC5/Tx.c ****     *     checked to identify free space in txBuffer.
1031:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
1032:.\Generated_Source\PSoC5/Tx.c ****     *     initialized.
1033:.\Generated_Source\PSoC5/Tx.c ****     *
1034:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1035:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1036:.\Generated_Source\PSoC5/Tx.c ****     *
1037:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1038:.\Generated_Source\PSoC5/Tx.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:.\Generated_Source\PSoC5/Tx.c ****     *
1040:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1041:.\Generated_Source\PSoC5/Tx.c ****     void Tx_PutChar(uint8 txDataByte) 
1042:.\Generated_Source\PSoC5/Tx.c ****     {
 398              		.loc 1 1042 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403 0000 80B4     		push	{r7}
 404              		.cfi_def_cfa_offset 4
 405              		.cfi_offset 7, -4
 406 0002 83B0     		sub	sp, sp, #12
 407              		.cfi_def_cfa_offset 16
 408 0004 00AF     		add	r7, sp, #0
 409              		.cfi_def_cfa_register 7
 410 0006 0346     		mov	r3, r0
 411 0008 FB71     		strb	r3, [r7, #7]
1043:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_TX_INTERRUPT_ENABLED)
1044:.\Generated_Source\PSoC5/Tx.c ****         /* The temporary output pointer is used since it takes two instructions
1045:.\Generated_Source\PSoC5/Tx.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:.\Generated_Source\PSoC5/Tx.c ****         *  pointer and getting an interrupt in between instructions.
1047:.\Generated_Source\PSoC5/Tx.c ****         */
1048:.\Generated_Source\PSoC5/Tx.c ****         uint8 locTxBufferWrite;
1049:.\Generated_Source\PSoC5/Tx.c ****         uint8 locTxBufferRead;
1050:.\Generated_Source\PSoC5/Tx.c **** 
1051:.\Generated_Source\PSoC5/Tx.c ****         do
1052:.\Generated_Source\PSoC5/Tx.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:.\Generated_Source\PSoC5/Tx.c **** 
1054:.\Generated_Source\PSoC5/Tx.c ****         #if ((Tx_TX_BUFFER_SIZE > Tx_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:.\Generated_Source\PSoC5/Tx.c ****             /* Disable TX interrupt to protect variables from modification */
1056:.\Generated_Source\PSoC5/Tx.c ****             Tx_DisableTxInt();
1057:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_BUFFER_SIZE > 255) */
1058:.\Generated_Source\PSoC5/Tx.c **** 
1059:.\Generated_Source\PSoC5/Tx.c ****             locTxBufferWrite = Tx_txBufferWrite;
1060:.\Generated_Source\PSoC5/Tx.c ****             locTxBufferRead  = Tx_txBufferRead;
1061:.\Generated_Source\PSoC5/Tx.c **** 
1062:.\Generated_Source\PSoC5/Tx.c ****         #if ((Tx_TX_BUFFER_SIZE > Tx_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:.\Generated_Source\PSoC5/Tx.c ****             /* Enable interrupt to continue transmission */
1064:.\Generated_Source\PSoC5/Tx.c ****             Tx_EnableTxInt();
1065:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_BUFFER_SIZE > 255) */
1066:.\Generated_Source\PSoC5/Tx.c ****         }
1067:.\Generated_Source\PSoC5/Tx.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:.\Generated_Source\PSoC5/Tx.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:.\Generated_Source\PSoC5/Tx.c ****                                 (uint8)(Tx_TX_BUFFER_SIZE - 1u)) );
1070:.\Generated_Source\PSoC5/Tx.c **** 
1071:.\Generated_Source\PSoC5/Tx.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 27


1072:.\Generated_Source\PSoC5/Tx.c ****             ((Tx_TXSTATUS_REG & Tx_TX_STS_FIFO_FULL) == 0u) )
1073:.\Generated_Source\PSoC5/Tx.c ****         {
1074:.\Generated_Source\PSoC5/Tx.c ****             /* Add directly to the FIFO */
1075:.\Generated_Source\PSoC5/Tx.c ****             Tx_TXDATA_REG = txDataByte;
1076:.\Generated_Source\PSoC5/Tx.c ****         }
1077:.\Generated_Source\PSoC5/Tx.c ****         else
1078:.\Generated_Source\PSoC5/Tx.c ****         {
1079:.\Generated_Source\PSoC5/Tx.c ****             if(locTxBufferWrite >= Tx_TX_BUFFER_SIZE)
1080:.\Generated_Source\PSoC5/Tx.c ****             {
1081:.\Generated_Source\PSoC5/Tx.c ****                 locTxBufferWrite = 0u;
1082:.\Generated_Source\PSoC5/Tx.c ****             }
1083:.\Generated_Source\PSoC5/Tx.c ****             /* Add to the software buffer. */
1084:.\Generated_Source\PSoC5/Tx.c ****             Tx_txBuffer[locTxBufferWrite] = txDataByte;
1085:.\Generated_Source\PSoC5/Tx.c ****             locTxBufferWrite++;
1086:.\Generated_Source\PSoC5/Tx.c **** 
1087:.\Generated_Source\PSoC5/Tx.c ****             /* Finally, update the real output pointer */
1088:.\Generated_Source\PSoC5/Tx.c ****         #if ((Tx_TX_BUFFER_SIZE > Tx_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:.\Generated_Source\PSoC5/Tx.c ****             Tx_DisableTxInt();
1090:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_BUFFER_SIZE > 255) */
1091:.\Generated_Source\PSoC5/Tx.c **** 
1092:.\Generated_Source\PSoC5/Tx.c ****             Tx_txBufferWrite = locTxBufferWrite;
1093:.\Generated_Source\PSoC5/Tx.c **** 
1094:.\Generated_Source\PSoC5/Tx.c ****         #if ((Tx_TX_BUFFER_SIZE > Tx_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:.\Generated_Source\PSoC5/Tx.c ****             Tx_EnableTxInt();
1096:.\Generated_Source\PSoC5/Tx.c ****         #endif /* (Tx_TX_BUFFER_SIZE > 255) */
1097:.\Generated_Source\PSoC5/Tx.c **** 
1098:.\Generated_Source\PSoC5/Tx.c ****             if(0u != (Tx_TXSTATUS_REG & Tx_TX_STS_FIFO_EMPTY))
1099:.\Generated_Source\PSoC5/Tx.c ****             {
1100:.\Generated_Source\PSoC5/Tx.c ****                 /* Trigger TX interrupt to send software buffer */
1101:.\Generated_Source\PSoC5/Tx.c ****                 Tx_SetPendingTxInt();
1102:.\Generated_Source\PSoC5/Tx.c ****             }
1103:.\Generated_Source\PSoC5/Tx.c ****         }
1104:.\Generated_Source\PSoC5/Tx.c **** 
1105:.\Generated_Source\PSoC5/Tx.c ****     #else
1106:.\Generated_Source\PSoC5/Tx.c **** 
1107:.\Generated_Source\PSoC5/Tx.c ****         while((Tx_TXSTATUS_REG & Tx_TX_STS_FIFO_FULL) != 0u)
 412              		.loc 1 1107 0
 413 000a 00BF     		nop
 414              	.L29:
 415              		.loc 1 1107 0 is_stmt 0 discriminator 1
 416 000c 074B     		ldr	r3, .L30
 417 000e 1B78     		ldrb	r3, [r3]
 418 0010 DBB2     		uxtb	r3, r3
 419 0012 03F00403 		and	r3, r3, #4
 420 0016 002B     		cmp	r3, #0
 421 0018 F8D1     		bne	.L29
1108:.\Generated_Source\PSoC5/Tx.c ****         {
1109:.\Generated_Source\PSoC5/Tx.c ****             /* Wait for room in the FIFO */
1110:.\Generated_Source\PSoC5/Tx.c ****         }
1111:.\Generated_Source\PSoC5/Tx.c **** 
1112:.\Generated_Source\PSoC5/Tx.c ****         /* Add directly to the FIFO */
1113:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXDATA_REG = txDataByte;
 422              		.loc 1 1113 0 is_stmt 1
 423 001a 054B     		ldr	r3, .L30+4
 424 001c FA79     		ldrb	r2, [r7, #7]
 425 001e 1A70     		strb	r2, [r3]
1114:.\Generated_Source\PSoC5/Tx.c **** 
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 28


1115:.\Generated_Source\PSoC5/Tx.c ****     #endif /* End (Tx_TX_INTERRUPT_ENABLED) */
1116:.\Generated_Source\PSoC5/Tx.c ****     }
 426              		.loc 1 1116 0
 427 0020 0C37     		adds	r7, r7, #12
 428 0022 BD46     		mov	sp, r7
 429              		@ sp needed
 430 0024 5DF8047B 		ldr	r7, [sp], #4
 431 0028 7047     		bx	lr
 432              	.L31:
 433 002a 00BF     		.align	2
 434              	.L30:
 435 002c 6C640040 		.word	1073767532
 436 0030 4C640040 		.word	1073767500
 437              		.cfi_endproc
 438              	.LFE9:
 439              		.size	Tx_PutChar, .-Tx_PutChar
 440              		.section	.text.Tx_PutString,"ax",%progbits
 441              		.align	2
 442              		.global	Tx_PutString
 443              		.thumb
 444              		.thumb_func
 445              		.type	Tx_PutString, %function
 446              	Tx_PutString:
 447              	.LFB10:
1117:.\Generated_Source\PSoC5/Tx.c **** 
1118:.\Generated_Source\PSoC5/Tx.c **** 
1119:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1120:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_PutString
1121:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1122:.\Generated_Source\PSoC5/Tx.c ****     *
1123:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1124:.\Generated_Source\PSoC5/Tx.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:.\Generated_Source\PSoC5/Tx.c ****     *
1126:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1127:.\Generated_Source\PSoC5/Tx.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:.\Generated_Source\PSoC5/Tx.c ****     *
1129:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1130:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1131:.\Generated_Source\PSoC5/Tx.c ****     *
1132:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1133:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
1134:.\Generated_Source\PSoC5/Tx.c ****     *     initialized.
1135:.\Generated_Source\PSoC5/Tx.c ****     *
1136:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1137:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1138:.\Generated_Source\PSoC5/Tx.c ****     *
1139:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1140:.\Generated_Source\PSoC5/Tx.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:.\Generated_Source\PSoC5/Tx.c ****     *  function blocks until the last character of the string is loaded into the
1142:.\Generated_Source\PSoC5/Tx.c ****     *  TX buffer.
1143:.\Generated_Source\PSoC5/Tx.c ****     *
1144:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1145:.\Generated_Source\PSoC5/Tx.c ****     void Tx_PutString(const char8 string[]) 
1146:.\Generated_Source\PSoC5/Tx.c ****     {
 448              		.loc 1 1146 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 29


 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 84B0     		sub	sp, sp, #16
 457              		.cfi_def_cfa_offset 24
 458 0004 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 460 0006 7860     		str	r0, [r7, #4]
1147:.\Generated_Source\PSoC5/Tx.c ****         uint16 bufIndex = 0u;
 461              		.loc 1 1147 0
 462 0008 0023     		movs	r3, #0
 463 000a FB81     		strh	r3, [r7, #14]	@ movhi
1148:.\Generated_Source\PSoC5/Tx.c **** 
1149:.\Generated_Source\PSoC5/Tx.c ****         /* If not Initialized then skip this function */
1150:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_initVar != 0u)
 464              		.loc 1 1150 0
 465 000c 0B4B     		ldr	r3, .L36
 466 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 467 0010 002B     		cmp	r3, #0
 468 0012 10D0     		beq	.L32
1151:.\Generated_Source\PSoC5/Tx.c ****         {
1152:.\Generated_Source\PSoC5/Tx.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:.\Generated_Source\PSoC5/Tx.c ****             while(string[bufIndex] != (char8) 0)
 469              		.loc 1 1153 0
 470 0014 09E0     		b	.L34
 471              	.L35:
1154:.\Generated_Source\PSoC5/Tx.c ****             {
1155:.\Generated_Source\PSoC5/Tx.c ****                 Tx_PutChar((uint8)string[bufIndex]);
 472              		.loc 1 1155 0
 473 0016 FB89     		ldrh	r3, [r7, #14]
 474 0018 7A68     		ldr	r2, [r7, #4]
 475 001a 1344     		add	r3, r3, r2
 476 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 477 001e 1846     		mov	r0, r3
 478 0020 FFF7FEFF 		bl	Tx_PutChar
1156:.\Generated_Source\PSoC5/Tx.c ****                 bufIndex++;
 479              		.loc 1 1156 0
 480 0024 FB89     		ldrh	r3, [r7, #14]
 481 0026 0133     		adds	r3, r3, #1
 482 0028 FB81     		strh	r3, [r7, #14]	@ movhi
 483              	.L34:
1153:.\Generated_Source\PSoC5/Tx.c ****             while(string[bufIndex] != (char8) 0)
 484              		.loc 1 1153 0 discriminator 1
 485 002a FB89     		ldrh	r3, [r7, #14]
 486 002c 7A68     		ldr	r2, [r7, #4]
 487 002e 1344     		add	r3, r3, r2
 488 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 489 0032 002B     		cmp	r3, #0
 490 0034 EFD1     		bne	.L35
 491              	.L32:
1157:.\Generated_Source\PSoC5/Tx.c ****             }
1158:.\Generated_Source\PSoC5/Tx.c ****         }
1159:.\Generated_Source\PSoC5/Tx.c ****     }
 492              		.loc 1 1159 0
 493 0036 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 30


 494 0038 BD46     		mov	sp, r7
 495              		@ sp needed
 496 003a 80BD     		pop	{r7, pc}
 497              	.L37:
 498              		.align	2
 499              	.L36:
 500 003c 00000000 		.word	Tx_initVar
 501              		.cfi_endproc
 502              	.LFE10:
 503              		.size	Tx_PutString, .-Tx_PutString
 504              		.section	.text.Tx_PutArray,"ax",%progbits
 505              		.align	2
 506              		.global	Tx_PutArray
 507              		.thumb
 508              		.thumb_func
 509              		.type	Tx_PutArray, %function
 510              	Tx_PutArray:
 511              	.LFB11:
1160:.\Generated_Source\PSoC5/Tx.c **** 
1161:.\Generated_Source\PSoC5/Tx.c **** 
1162:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1163:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_PutArray
1164:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1165:.\Generated_Source\PSoC5/Tx.c ****     *
1166:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1167:.\Generated_Source\PSoC5/Tx.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:.\Generated_Source\PSoC5/Tx.c ****     *  transmission.
1169:.\Generated_Source\PSoC5/Tx.c ****     *
1170:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1171:.\Generated_Source\PSoC5/Tx.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:.\Generated_Source\PSoC5/Tx.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:.\Generated_Source\PSoC5/Tx.c ****     *             Size parameter.
1174:.\Generated_Source\PSoC5/Tx.c ****     *
1175:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1176:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1177:.\Generated_Source\PSoC5/Tx.c ****     *
1178:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1179:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
1180:.\Generated_Source\PSoC5/Tx.c ****     *     initialized.
1181:.\Generated_Source\PSoC5/Tx.c ****     *
1182:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1183:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1184:.\Generated_Source\PSoC5/Tx.c ****     *
1185:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1186:.\Generated_Source\PSoC5/Tx.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:.\Generated_Source\PSoC5/Tx.c ****     *  function blocks until the last character of the string is loaded into the
1188:.\Generated_Source\PSoC5/Tx.c ****     *  TX buffer.
1189:.\Generated_Source\PSoC5/Tx.c ****     *
1190:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1191:.\Generated_Source\PSoC5/Tx.c ****     void Tx_PutArray(const uint8 string[], uint8 byteCount)
1192:.\Generated_Source\PSoC5/Tx.c ****                                                                     
1193:.\Generated_Source\PSoC5/Tx.c ****     {
 512              		.loc 1 1193 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 16
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 31


 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 7, -8
 519              		.cfi_offset 14, -4
 520 0002 84B0     		sub	sp, sp, #16
 521              		.cfi_def_cfa_offset 24
 522 0004 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 525 0008 0B46     		mov	r3, r1
 526 000a FB70     		strb	r3, [r7, #3]
1194:.\Generated_Source\PSoC5/Tx.c ****         uint8 bufIndex = 0u;
 527              		.loc 1 1194 0
 528 000c 0023     		movs	r3, #0
 529 000e FB73     		strb	r3, [r7, #15]
1195:.\Generated_Source\PSoC5/Tx.c **** 
1196:.\Generated_Source\PSoC5/Tx.c ****         /* If not Initialized then skip this function */
1197:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_initVar != 0u)
 530              		.loc 1 1197 0
 531 0010 0A4B     		ldr	r3, .L42
 532 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 533 0014 002B     		cmp	r3, #0
 534 0016 0ED0     		beq	.L38
1198:.\Generated_Source\PSoC5/Tx.c ****         {
1199:.\Generated_Source\PSoC5/Tx.c ****             while(bufIndex < byteCount)
 535              		.loc 1 1199 0
 536 0018 09E0     		b	.L40
 537              	.L41:
1200:.\Generated_Source\PSoC5/Tx.c ****             {
1201:.\Generated_Source\PSoC5/Tx.c ****                 Tx_PutChar(string[bufIndex]);
 538              		.loc 1 1201 0
 539 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 540 001c 7A68     		ldr	r2, [r7, #4]
 541 001e 1344     		add	r3, r3, r2
 542 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 543 0022 1846     		mov	r0, r3
 544 0024 FFF7FEFF 		bl	Tx_PutChar
1202:.\Generated_Source\PSoC5/Tx.c ****                 bufIndex++;
 545              		.loc 1 1202 0
 546 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 547 002a 0133     		adds	r3, r3, #1
 548 002c FB73     		strb	r3, [r7, #15]
 549              	.L40:
1199:.\Generated_Source\PSoC5/Tx.c ****             while(bufIndex < byteCount)
 550              		.loc 1 1199 0 discriminator 1
 551 002e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 552 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 553 0032 9A42     		cmp	r2, r3
 554 0034 F1D3     		bcc	.L41
 555              	.L38:
1203:.\Generated_Source\PSoC5/Tx.c ****             }
1204:.\Generated_Source\PSoC5/Tx.c ****         }
1205:.\Generated_Source\PSoC5/Tx.c ****     }
 556              		.loc 1 1205 0
 557 0036 1037     		adds	r7, r7, #16
 558 0038 BD46     		mov	sp, r7
 559              		@ sp needed
 560 003a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 32


 561              	.L43:
 562              		.align	2
 563              	.L42:
 564 003c 00000000 		.word	Tx_initVar
 565              		.cfi_endproc
 566              	.LFE11:
 567              		.size	Tx_PutArray, .-Tx_PutArray
 568              		.section	.text.Tx_PutCRLF,"ax",%progbits
 569              		.align	2
 570              		.global	Tx_PutCRLF
 571              		.thumb
 572              		.thumb_func
 573              		.type	Tx_PutCRLF, %function
 574              	Tx_PutCRLF:
 575              	.LFB12:
1206:.\Generated_Source\PSoC5/Tx.c **** 
1207:.\Generated_Source\PSoC5/Tx.c **** 
1208:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1209:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_PutCRLF
1210:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1211:.\Generated_Source\PSoC5/Tx.c ****     *
1212:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1213:.\Generated_Source\PSoC5/Tx.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:.\Generated_Source\PSoC5/Tx.c ****     *  (0x0A) to the transmit buffer.
1215:.\Generated_Source\PSoC5/Tx.c ****     *
1216:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1217:.\Generated_Source\PSoC5/Tx.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:.\Generated_Source\PSoC5/Tx.c ****     *
1219:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1220:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1221:.\Generated_Source\PSoC5/Tx.c ****     *
1222:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1223:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
1224:.\Generated_Source\PSoC5/Tx.c ****     *     initialized.
1225:.\Generated_Source\PSoC5/Tx.c ****     *
1226:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1227:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1228:.\Generated_Source\PSoC5/Tx.c ****     *
1229:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1230:.\Generated_Source\PSoC5/Tx.c ****     void Tx_PutCRLF(uint8 txDataByte) 
1231:.\Generated_Source\PSoC5/Tx.c ****     {
 576              		.loc 1 1231 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 8
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 80B5     		push	{r7, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 7, -8
 583              		.cfi_offset 14, -4
 584 0002 82B0     		sub	sp, sp, #8
 585              		.cfi_def_cfa_offset 16
 586 0004 00AF     		add	r7, sp, #0
 587              		.cfi_def_cfa_register 7
 588 0006 0346     		mov	r3, r0
 589 0008 FB71     		strb	r3, [r7, #7]
1232:.\Generated_Source\PSoC5/Tx.c ****         /* If not Initialized then skip this function */
1233:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_initVar != 0u)
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 33


 590              		.loc 1 1233 0
 591 000a 084B     		ldr	r3, .L46
 592 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 593 000e 002B     		cmp	r3, #0
 594 0010 09D0     		beq	.L44
1234:.\Generated_Source\PSoC5/Tx.c ****         {
1235:.\Generated_Source\PSoC5/Tx.c ****             Tx_PutChar(txDataByte);
 595              		.loc 1 1235 0
 596 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 597 0014 1846     		mov	r0, r3
 598 0016 FFF7FEFF 		bl	Tx_PutChar
1236:.\Generated_Source\PSoC5/Tx.c ****             Tx_PutChar(0x0Du);
 599              		.loc 1 1236 0
 600 001a 0D20     		movs	r0, #13
 601 001c FFF7FEFF 		bl	Tx_PutChar
1237:.\Generated_Source\PSoC5/Tx.c ****             Tx_PutChar(0x0Au);
 602              		.loc 1 1237 0
 603 0020 0A20     		movs	r0, #10
 604 0022 FFF7FEFF 		bl	Tx_PutChar
 605              	.L44:
1238:.\Generated_Source\PSoC5/Tx.c ****         }
1239:.\Generated_Source\PSoC5/Tx.c ****     }
 606              		.loc 1 1239 0
 607 0026 0837     		adds	r7, r7, #8
 608 0028 BD46     		mov	sp, r7
 609              		@ sp needed
 610 002a 80BD     		pop	{r7, pc}
 611              	.L47:
 612              		.align	2
 613              	.L46:
 614 002c 00000000 		.word	Tx_initVar
 615              		.cfi_endproc
 616              	.LFE12:
 617              		.size	Tx_PutCRLF, .-Tx_PutCRLF
 618              		.section	.text.Tx_GetTxBufferSize,"ax",%progbits
 619              		.align	2
 620              		.global	Tx_GetTxBufferSize
 621              		.thumb
 622              		.thumb_func
 623              		.type	Tx_GetTxBufferSize, %function
 624              	Tx_GetTxBufferSize:
 625              	.LFB13:
1240:.\Generated_Source\PSoC5/Tx.c **** 
1241:.\Generated_Source\PSoC5/Tx.c **** 
1242:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1243:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_GetTxBufferSize
1244:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1245:.\Generated_Source\PSoC5/Tx.c ****     *
1246:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1247:.\Generated_Source\PSoC5/Tx.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:.\Generated_Source\PSoC5/Tx.c ****     *  transmitted.
1249:.\Generated_Source\PSoC5/Tx.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:.\Generated_Source\PSoC5/Tx.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:.\Generated_Source\PSoC5/Tx.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:.\Generated_Source\PSoC5/Tx.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:.\Generated_Source\PSoC5/Tx.c ****     *    TX FIFO do not take to account.
1254:.\Generated_Source\PSoC5/Tx.c ****     *
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 34


1255:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1256:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1257:.\Generated_Source\PSoC5/Tx.c ****     *
1258:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1259:.\Generated_Source\PSoC5/Tx.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:.\Generated_Source\PSoC5/Tx.c ****     *  Buffer Size parameter.
1261:.\Generated_Source\PSoC5/Tx.c ****     *
1262:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1263:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferWrite - used to calculate left space.
1264:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferRead - used to calculate left space.
1265:.\Generated_Source\PSoC5/Tx.c ****     *
1266:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1267:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1268:.\Generated_Source\PSoC5/Tx.c ****     *
1269:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1270:.\Generated_Source\PSoC5/Tx.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:.\Generated_Source\PSoC5/Tx.c ****     *
1272:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/Tx.c ****     uint8 Tx_GetTxBufferSize(void)
1274:.\Generated_Source\PSoC5/Tx.c ****                                                             
1275:.\Generated_Source\PSoC5/Tx.c ****     {
 626              		.loc 1 1275 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              		.cfi_def_cfa_offset 4
 633              		.cfi_offset 7, -4
 634 0002 83B0     		sub	sp, sp, #12
 635              		.cfi_def_cfa_offset 16
 636 0004 00AF     		add	r7, sp, #0
 637              		.cfi_def_cfa_register 7
1276:.\Generated_Source\PSoC5/Tx.c ****         uint8 size;
1277:.\Generated_Source\PSoC5/Tx.c **** 
1278:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_TX_INTERRUPT_ENABLED)
1279:.\Generated_Source\PSoC5/Tx.c **** 
1280:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt. */
1281:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableTxInt();
1282:.\Generated_Source\PSoC5/Tx.c **** 
1283:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_txBufferRead == Tx_txBufferWrite)
1284:.\Generated_Source\PSoC5/Tx.c ****         {
1285:.\Generated_Source\PSoC5/Tx.c ****             size = 0u;
1286:.\Generated_Source\PSoC5/Tx.c ****         }
1287:.\Generated_Source\PSoC5/Tx.c ****         else if(Tx_txBufferRead < Tx_txBufferWrite)
1288:.\Generated_Source\PSoC5/Tx.c ****         {
1289:.\Generated_Source\PSoC5/Tx.c ****             size = (Tx_txBufferWrite - Tx_txBufferRead);
1290:.\Generated_Source\PSoC5/Tx.c ****         }
1291:.\Generated_Source\PSoC5/Tx.c ****         else
1292:.\Generated_Source\PSoC5/Tx.c ****         {
1293:.\Generated_Source\PSoC5/Tx.c ****             size = (Tx_TX_BUFFER_SIZE - Tx_txBufferRead) +
1294:.\Generated_Source\PSoC5/Tx.c ****                     Tx_txBufferWrite;
1295:.\Generated_Source\PSoC5/Tx.c ****         }
1296:.\Generated_Source\PSoC5/Tx.c **** 
1297:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableTxInt();
1298:.\Generated_Source\PSoC5/Tx.c **** 
1299:.\Generated_Source\PSoC5/Tx.c ****     #else
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 35


1300:.\Generated_Source\PSoC5/Tx.c **** 
1301:.\Generated_Source\PSoC5/Tx.c ****         size = Tx_TXSTATUS_REG;
 638              		.loc 1 1301 0
 639 0006 0E4B     		ldr	r3, .L53
 640 0008 1B78     		ldrb	r3, [r3]
 641 000a FB71     		strb	r3, [r7, #7]
1302:.\Generated_Source\PSoC5/Tx.c **** 
1303:.\Generated_Source\PSoC5/Tx.c ****         /* Is the fifo is full. */
1304:.\Generated_Source\PSoC5/Tx.c ****         if((size & Tx_TX_STS_FIFO_FULL) != 0u)
 642              		.loc 1 1304 0
 643 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 644 000e 03F00403 		and	r3, r3, #4
 645 0012 002B     		cmp	r3, #0
 646 0014 02D0     		beq	.L49
1305:.\Generated_Source\PSoC5/Tx.c ****         {
1306:.\Generated_Source\PSoC5/Tx.c ****             size = Tx_FIFO_LENGTH;
 647              		.loc 1 1306 0
 648 0016 0423     		movs	r3, #4
 649 0018 FB71     		strb	r3, [r7, #7]
 650 001a 09E0     		b	.L50
 651              	.L49:
1307:.\Generated_Source\PSoC5/Tx.c ****         }
1308:.\Generated_Source\PSoC5/Tx.c ****         else if((size & Tx_TX_STS_FIFO_EMPTY) != 0u)
 652              		.loc 1 1308 0
 653 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 654 001e 03F00203 		and	r3, r3, #2
 655 0022 002B     		cmp	r3, #0
 656 0024 02D0     		beq	.L51
1309:.\Generated_Source\PSoC5/Tx.c ****         {
1310:.\Generated_Source\PSoC5/Tx.c ****             size = 0u;
 657              		.loc 1 1310 0
 658 0026 0023     		movs	r3, #0
 659 0028 FB71     		strb	r3, [r7, #7]
 660 002a 01E0     		b	.L50
 661              	.L51:
1311:.\Generated_Source\PSoC5/Tx.c ****         }
1312:.\Generated_Source\PSoC5/Tx.c ****         else
1313:.\Generated_Source\PSoC5/Tx.c ****         {
1314:.\Generated_Source\PSoC5/Tx.c ****             /* We only know there is data in the fifo. */
1315:.\Generated_Source\PSoC5/Tx.c ****             size = 1u;
 662              		.loc 1 1315 0
 663 002c 0123     		movs	r3, #1
 664 002e FB71     		strb	r3, [r7, #7]
 665              	.L50:
1316:.\Generated_Source\PSoC5/Tx.c ****         }
1317:.\Generated_Source\PSoC5/Tx.c **** 
1318:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_TX_INTERRUPT_ENABLED) */
1319:.\Generated_Source\PSoC5/Tx.c **** 
1320:.\Generated_Source\PSoC5/Tx.c ****     return(size);
 666              		.loc 1 1320 0
 667 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1321:.\Generated_Source\PSoC5/Tx.c ****     }
 668              		.loc 1 1321 0
 669 0032 1846     		mov	r0, r3
 670 0034 0C37     		adds	r7, r7, #12
 671 0036 BD46     		mov	sp, r7
 672              		@ sp needed
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 36


 673 0038 5DF8047B 		ldr	r7, [sp], #4
 674 003c 7047     		bx	lr
 675              	.L54:
 676 003e 00BF     		.align	2
 677              	.L53:
 678 0040 6C640040 		.word	1073767532
 679              		.cfi_endproc
 680              	.LFE13:
 681              		.size	Tx_GetTxBufferSize, .-Tx_GetTxBufferSize
 682              		.section	.text.Tx_ClearTxBuffer,"ax",%progbits
 683              		.align	2
 684              		.global	Tx_ClearTxBuffer
 685              		.thumb
 686              		.thumb_func
 687              		.type	Tx_ClearTxBuffer, %function
 688              	Tx_ClearTxBuffer:
 689              	.LFB14:
1322:.\Generated_Source\PSoC5/Tx.c **** 
1323:.\Generated_Source\PSoC5/Tx.c **** 
1324:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1325:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_ClearTxBuffer
1326:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1327:.\Generated_Source\PSoC5/Tx.c ****     *
1328:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1329:.\Generated_Source\PSoC5/Tx.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:.\Generated_Source\PSoC5/Tx.c ****     *
1331:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1332:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1333:.\Generated_Source\PSoC5/Tx.c ****     *
1334:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1335:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1336:.\Generated_Source\PSoC5/Tx.c ****     *
1337:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1338:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferWrite - cleared to zero.
1339:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_txBufferRead - cleared to zero.
1340:.\Generated_Source\PSoC5/Tx.c ****     *
1341:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1342:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1343:.\Generated_Source\PSoC5/Tx.c ****     *
1344:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1345:.\Generated_Source\PSoC5/Tx.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:.\Generated_Source\PSoC5/Tx.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:.\Generated_Source\PSoC5/Tx.c ****     *  remained in the RAM.
1348:.\Generated_Source\PSoC5/Tx.c ****     *
1349:.\Generated_Source\PSoC5/Tx.c ****     * Side Effects:
1350:.\Generated_Source\PSoC5/Tx.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:.\Generated_Source\PSoC5/Tx.c ****     *  transmitting finishes transmitting.
1352:.\Generated_Source\PSoC5/Tx.c ****     *
1353:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1354:.\Generated_Source\PSoC5/Tx.c ****     void Tx_ClearTxBuffer(void) 
1355:.\Generated_Source\PSoC5/Tx.c ****     {
 690              		.loc 1 1355 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 8
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694 0000 80B5     		push	{r7, lr}
 695              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 37


 696              		.cfi_offset 7, -8
 697              		.cfi_offset 14, -4
 698 0002 82B0     		sub	sp, sp, #8
 699              		.cfi_def_cfa_offset 16
 700 0004 00AF     		add	r7, sp, #0
 701              		.cfi_def_cfa_register 7
1356:.\Generated_Source\PSoC5/Tx.c ****         uint8 enableInterrupts;
1357:.\Generated_Source\PSoC5/Tx.c **** 
1358:.\Generated_Source\PSoC5/Tx.c ****         enableInterrupts = CyEnterCriticalSection();
 702              		.loc 1 1358 0
 703 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 704 000a 0346     		mov	r3, r0
 705 000c FB71     		strb	r3, [r7, #7]
1359:.\Generated_Source\PSoC5/Tx.c ****         /* Clear the HW FIFO */
1360:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXDATA_AUX_CTL_REG |= (uint8)  Tx_TX_FIFO_CLR;
 706              		.loc 1 1360 0
 707 000e 0B4B     		ldr	r3, .L56
 708 0010 0A4A     		ldr	r2, .L56
 709 0012 1278     		ldrb	r2, [r2]
 710 0014 D2B2     		uxtb	r2, r2
 711 0016 42F00102 		orr	r2, r2, #1
 712 001a D2B2     		uxtb	r2, r2
 713 001c 1A70     		strb	r2, [r3]
1361:.\Generated_Source\PSoC5/Tx.c ****         Tx_TXDATA_AUX_CTL_REG &= (uint8) ~Tx_TX_FIFO_CLR;
 714              		.loc 1 1361 0
 715 001e 074B     		ldr	r3, .L56
 716 0020 064A     		ldr	r2, .L56
 717 0022 1278     		ldrb	r2, [r2]
 718 0024 D2B2     		uxtb	r2, r2
 719 0026 22F00102 		bic	r2, r2, #1
 720 002a D2B2     		uxtb	r2, r2
 721 002c 1A70     		strb	r2, [r3]
1362:.\Generated_Source\PSoC5/Tx.c ****         CyExitCriticalSection(enableInterrupts);
 722              		.loc 1 1362 0
 723 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 724 0030 1846     		mov	r0, r3
 725 0032 FFF7FEFF 		bl	CyExitCriticalSection
1363:.\Generated_Source\PSoC5/Tx.c **** 
1364:.\Generated_Source\PSoC5/Tx.c ****     #if (Tx_TX_INTERRUPT_ENABLED)
1365:.\Generated_Source\PSoC5/Tx.c **** 
1366:.\Generated_Source\PSoC5/Tx.c ****         /* Protect variables that could change on interrupt. */
1367:.\Generated_Source\PSoC5/Tx.c ****         Tx_DisableTxInt();
1368:.\Generated_Source\PSoC5/Tx.c **** 
1369:.\Generated_Source\PSoC5/Tx.c ****         Tx_txBufferRead = 0u;
1370:.\Generated_Source\PSoC5/Tx.c ****         Tx_txBufferWrite = 0u;
1371:.\Generated_Source\PSoC5/Tx.c **** 
1372:.\Generated_Source\PSoC5/Tx.c ****         /* Enable Tx interrupt. */
1373:.\Generated_Source\PSoC5/Tx.c ****         Tx_EnableTxInt();
1374:.\Generated_Source\PSoC5/Tx.c **** 
1375:.\Generated_Source\PSoC5/Tx.c ****     #endif /* (Tx_TX_INTERRUPT_ENABLED) */
1376:.\Generated_Source\PSoC5/Tx.c ****     }
 726              		.loc 1 1376 0
 727 0036 0837     		adds	r7, r7, #8
 728 0038 BD46     		mov	sp, r7
 729              		@ sp needed
 730 003a 80BD     		pop	{r7, pc}
 731              	.L57:
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 38


 732              		.align	2
 733              	.L56:
 734 003c 9C640040 		.word	1073767580
 735              		.cfi_endproc
 736              	.LFE14:
 737              		.size	Tx_ClearTxBuffer, .-Tx_ClearTxBuffer
 738              		.section	.text.Tx_SendBreak,"ax",%progbits
 739              		.align	2
 740              		.global	Tx_SendBreak
 741              		.thumb
 742              		.thumb_func
 743              		.type	Tx_SendBreak, %function
 744              	Tx_SendBreak:
 745              	.LFB15:
1377:.\Generated_Source\PSoC5/Tx.c **** 
1378:.\Generated_Source\PSoC5/Tx.c **** 
1379:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1380:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SendBreak
1381:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1382:.\Generated_Source\PSoC5/Tx.c ****     *
1383:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1384:.\Generated_Source\PSoC5/Tx.c ****     *  Transmits a break signal on the bus.
1385:.\Generated_Source\PSoC5/Tx.c ****     *
1386:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1387:.\Generated_Source\PSoC5/Tx.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_SEND_BREAK - Initialize registers for break, send the Break
1389:.\Generated_Source\PSoC5/Tx.c ****     *       signal and return immediately.
1390:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:.\Generated_Source\PSoC5/Tx.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_REINIT - Reinitialize registers to normal transmission mode
1393:.\Generated_Source\PSoC5/Tx.c ****     *       then return.
1394:.\Generated_Source\PSoC5/Tx.c ****     *   Tx_SEND_WAIT_REINIT - Performs both options: 
1395:.\Generated_Source\PSoC5/Tx.c ****     *      Tx_SEND_BREAK and Tx_WAIT_FOR_COMPLETE_REINIT.
1396:.\Generated_Source\PSoC5/Tx.c ****     *      This option is recommended for most cases.
1397:.\Generated_Source\PSoC5/Tx.c ****     *
1398:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1399:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1400:.\Generated_Source\PSoC5/Tx.c ****     *
1401:.\Generated_Source\PSoC5/Tx.c ****     * Global Variables:
1402:.\Generated_Source\PSoC5/Tx.c ****     *  Tx_initVar - checked to identify that the component has been
1403:.\Generated_Source\PSoC5/Tx.c ****     *     initialized.
1404:.\Generated_Source\PSoC5/Tx.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:.\Generated_Source\PSoC5/Tx.c ****     *
1406:.\Generated_Source\PSoC5/Tx.c ****     * Reentrant:
1407:.\Generated_Source\PSoC5/Tx.c ****     *  No.
1408:.\Generated_Source\PSoC5/Tx.c ****     *
1409:.\Generated_Source\PSoC5/Tx.c ****     * Theory:
1410:.\Generated_Source\PSoC5/Tx.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:.\Generated_Source\PSoC5/Tx.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:.\Generated_Source\PSoC5/Tx.c ****     *  operation.
1413:.\Generated_Source\PSoC5/Tx.c ****     *  There are 3 variants for this API usage:
1414:.\Generated_Source\PSoC5/Tx.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:.\Generated_Source\PSoC5/Tx.c ****     *     configuration returning. Function will block CPU until transmission
1416:.\Generated_Source\PSoC5/Tx.c ****     *     complete.
1417:.\Generated_Source\PSoC5/Tx.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:.\Generated_Source\PSoC5/Tx.c ****     *     operation
1419:.\Generated_Source\PSoC5/Tx.c ****     *     Example for this case:
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 39


1420:.\Generated_Source\PSoC5/Tx.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:.\Generated_Source\PSoC5/Tx.c ****     *         Add your code here to use CPU time
1422:.\Generated_Source\PSoC5/Tx.c ****     *     SendBreak(1);     - complete Break operation
1423:.\Generated_Source\PSoC5/Tx.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:.\Generated_Source\PSoC5/Tx.c ****     *     complete break operation.
1425:.\Generated_Source\PSoC5/Tx.c ****     *     Example for this case:
1426:.\Generated_Source\PSoC5/Tx.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:.\Generated_Source\PSoC5/Tx.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:.\Generated_Source\PSoC5/Tx.c ****     *         Add your code here to use CPU time
1429:.\Generated_Source\PSoC5/Tx.c ****     *     When interrupt appear with Tx_TX_STS_COMPLETE status:
1430:.\Generated_Source\PSoC5/Tx.c ****     *     SendBreak(2);     - complete Break operation
1431:.\Generated_Source\PSoC5/Tx.c ****     *
1432:.\Generated_Source\PSoC5/Tx.c ****     * Side Effects:
1433:.\Generated_Source\PSoC5/Tx.c ****     *  The Tx_SendBreak() function initializes registers to send a
1434:.\Generated_Source\PSoC5/Tx.c ****     *  break signal.
1435:.\Generated_Source\PSoC5/Tx.c ****     *  Break signal length depends on the break signal bits configuration.
1436:.\Generated_Source\PSoC5/Tx.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:.\Generated_Source\PSoC5/Tx.c ****     *  communication can continue.
1438:.\Generated_Source\PSoC5/Tx.c ****     *
1439:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1440:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SendBreak(uint8 retMode) 
1441:.\Generated_Source\PSoC5/Tx.c ****     {
 746              		.loc 1 1441 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 16
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 0000 80B4     		push	{r7}
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 7, -4
 754 0002 85B0     		sub	sp, sp, #20
 755              		.cfi_def_cfa_offset 24
 756 0004 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 758 0006 0346     		mov	r3, r0
 759 0008 FB71     		strb	r3, [r7, #7]
1442:.\Generated_Source\PSoC5/Tx.c **** 
1443:.\Generated_Source\PSoC5/Tx.c ****         /* If not Initialized then skip this function*/
1444:.\Generated_Source\PSoC5/Tx.c ****         if(Tx_initVar != 0u)
 760              		.loc 1 1444 0
 761 000a 1F4B     		ldr	r3, .L66
 762 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 763 000e 002B     		cmp	r3, #0
 764 0010 35D0     		beq	.L58
 765              	.LBB2:
1445:.\Generated_Source\PSoC5/Tx.c ****         {
1446:.\Generated_Source\PSoC5/Tx.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:.\Generated_Source\PSoC5/Tx.c ****             /* When that is done then reset the counter value back */
1448:.\Generated_Source\PSoC5/Tx.c ****             uint8 tmpStat;
1449:.\Generated_Source\PSoC5/Tx.c **** 
1450:.\Generated_Source\PSoC5/Tx.c ****         #if(Tx_HD_ENABLED) /* Half Duplex mode*/
1451:.\Generated_Source\PSoC5/Tx.c **** 
1452:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_SEND_BREAK) ||
1453:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT ) )
1454:.\Generated_Source\PSoC5/Tx.c ****             {
1455:.\Generated_Source\PSoC5/Tx.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:.\Generated_Source\PSoC5/Tx.c ****                 Tx_WriteControlRegister(Tx_ReadControlRegister() |
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 40


1457:.\Generated_Source\PSoC5/Tx.c ****                                                       Tx_CTRL_HD_SEND_BREAK);
1458:.\Generated_Source\PSoC5/Tx.c ****                 /* Send zeros */
1459:.\Generated_Source\PSoC5/Tx.c ****                 Tx_TXDATA_REG = 0u;
1460:.\Generated_Source\PSoC5/Tx.c **** 
1461:.\Generated_Source\PSoC5/Tx.c ****                 do /* Wait until transmit starts */
1462:.\Generated_Source\PSoC5/Tx.c ****                 {
1463:.\Generated_Source\PSoC5/Tx.c ****                     tmpStat = Tx_TXSTATUS_REG;
1464:.\Generated_Source\PSoC5/Tx.c ****                 }
1465:.\Generated_Source\PSoC5/Tx.c ****                 while((tmpStat & Tx_TX_STS_FIFO_EMPTY) != 0u);
1466:.\Generated_Source\PSoC5/Tx.c ****             }
1467:.\Generated_Source\PSoC5/Tx.c **** 
1468:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_WAIT_FOR_COMPLETE_REINIT) ||
1469:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT) )
1470:.\Generated_Source\PSoC5/Tx.c ****             {
1471:.\Generated_Source\PSoC5/Tx.c ****                 do /* Wait until transmit complete */
1472:.\Generated_Source\PSoC5/Tx.c ****                 {
1473:.\Generated_Source\PSoC5/Tx.c ****                     tmpStat = Tx_TXSTATUS_REG;
1474:.\Generated_Source\PSoC5/Tx.c ****                 }
1475:.\Generated_Source\PSoC5/Tx.c ****                 while(((uint8)~tmpStat & Tx_TX_STS_COMPLETE) != 0u);
1476:.\Generated_Source\PSoC5/Tx.c ****             }
1477:.\Generated_Source\PSoC5/Tx.c **** 
1478:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_WAIT_FOR_COMPLETE_REINIT) ||
1479:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_REINIT) ||
1480:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT) )
1481:.\Generated_Source\PSoC5/Tx.c ****             {
1482:.\Generated_Source\PSoC5/Tx.c ****                 Tx_WriteControlRegister(Tx_ReadControlRegister() &
1483:.\Generated_Source\PSoC5/Tx.c ****                                               (uint8)~Tx_CTRL_HD_SEND_BREAK);
1484:.\Generated_Source\PSoC5/Tx.c ****             }
1485:.\Generated_Source\PSoC5/Tx.c **** 
1486:.\Generated_Source\PSoC5/Tx.c ****         #else /* Tx_HD_ENABLED Full Duplex mode */
1487:.\Generated_Source\PSoC5/Tx.c **** 
1488:.\Generated_Source\PSoC5/Tx.c ****             static uint8 txPeriod;
1489:.\Generated_Source\PSoC5/Tx.c **** 
1490:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_SEND_BREAK) ||
 766              		.loc 1 1490 0
 767 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 768 0014 002B     		cmp	r3, #0
 769 0016 02D0     		beq	.L60
 770              		.loc 1 1490 0 is_stmt 0 discriminator 1
 771 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 772 001a 032B     		cmp	r3, #3
 773 001c 12D1     		bne	.L61
 774              	.L60:
1491:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT) )
1492:.\Generated_Source\PSoC5/Tx.c ****             {
1493:.\Generated_Source\PSoC5/Tx.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:.\Generated_Source\PSoC5/Tx.c ****                 #if( (Tx_PARITY_TYPE != Tx__B_UART__NONE_REVB) || \
1495:.\Generated_Source\PSoC5/Tx.c ****                                     (Tx_PARITY_TYPE_SW != 0u) )
1496:.\Generated_Source\PSoC5/Tx.c ****                     Tx_WriteControlRegister(Tx_ReadControlRegister() |
1497:.\Generated_Source\PSoC5/Tx.c ****                                                           Tx_CTRL_HD_SEND_BREAK);
1498:.\Generated_Source\PSoC5/Tx.c ****                 #endif /* End Tx_PARITY_TYPE != Tx__B_UART__NONE_REVB  */
1499:.\Generated_Source\PSoC5/Tx.c **** 
1500:.\Generated_Source\PSoC5/Tx.c ****                 #if(Tx_TXCLKGEN_DP)
1501:.\Generated_Source\PSoC5/Tx.c ****                     txPeriod = Tx_TXBITCLKTX_COMPLETE_REG;
 775              		.loc 1 1501 0 is_stmt 1
 776 001e 1B4B     		ldr	r3, .L66+4
 777 0020 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 41


 778 0022 DAB2     		uxtb	r2, r3
 779 0024 1A4B     		ldr	r3, .L66+8
 780 0026 1A70     		strb	r2, [r3]
1502:.\Generated_Source\PSoC5/Tx.c ****                     Tx_TXBITCLKTX_COMPLETE_REG = Tx_TXBITCTR_BREAKBITS;
 781              		.loc 1 1502 0
 782 0028 184B     		ldr	r3, .L66+4
 783 002a 6722     		movs	r2, #103
 784 002c 1A70     		strb	r2, [r3]
1503:.\Generated_Source\PSoC5/Tx.c ****                 #else
1504:.\Generated_Source\PSoC5/Tx.c ****                     txPeriod = Tx_TXBITCTR_PERIOD_REG;
1505:.\Generated_Source\PSoC5/Tx.c ****                     Tx_TXBITCTR_PERIOD_REG = Tx_TXBITCTR_BREAKBITS8X;
1506:.\Generated_Source\PSoC5/Tx.c ****                 #endif /* End Tx_TXCLKGEN_DP */
1507:.\Generated_Source\PSoC5/Tx.c **** 
1508:.\Generated_Source\PSoC5/Tx.c ****                 /* Send zeros */
1509:.\Generated_Source\PSoC5/Tx.c ****                 Tx_TXDATA_REG = 0u;
 785              		.loc 1 1509 0
 786 002e 194B     		ldr	r3, .L66+12
 787 0030 0022     		movs	r2, #0
 788 0032 1A70     		strb	r2, [r3]
 789              	.L62:
1510:.\Generated_Source\PSoC5/Tx.c **** 
1511:.\Generated_Source\PSoC5/Tx.c ****                 do /* Wait until transmit starts */
1512:.\Generated_Source\PSoC5/Tx.c ****                 {
1513:.\Generated_Source\PSoC5/Tx.c ****                     tmpStat = Tx_TXSTATUS_REG;
 790              		.loc 1 1513 0 discriminator 1
 791 0034 184B     		ldr	r3, .L66+16
 792 0036 1B78     		ldrb	r3, [r3]
 793 0038 FB73     		strb	r3, [r7, #15]
1514:.\Generated_Source\PSoC5/Tx.c ****                 }
1515:.\Generated_Source\PSoC5/Tx.c ****                 while((tmpStat & Tx_TX_STS_FIFO_EMPTY) != 0u);
 794              		.loc 1 1515 0 discriminator 1
 795 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 796 003c 03F00203 		and	r3, r3, #2
 797 0040 002B     		cmp	r3, #0
 798 0042 F7D1     		bne	.L62
 799              	.L61:
1516:.\Generated_Source\PSoC5/Tx.c ****             }
1517:.\Generated_Source\PSoC5/Tx.c **** 
1518:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_WAIT_FOR_COMPLETE_REINIT) ||
 800              		.loc 1 1518 0
 801 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 802 0046 012B     		cmp	r3, #1
 803 0048 02D0     		beq	.L63
 804              		.loc 1 1518 0 is_stmt 0 discriminator 1
 805 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 806 004c 032B     		cmp	r3, #3
 807 004e 09D1     		bne	.L64
 808              	.L63:
1519:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT) )
1520:.\Generated_Source\PSoC5/Tx.c ****             {
1521:.\Generated_Source\PSoC5/Tx.c ****                 do /* Wait until transmit complete */
1522:.\Generated_Source\PSoC5/Tx.c ****                 {
1523:.\Generated_Source\PSoC5/Tx.c ****                     tmpStat = Tx_TXSTATUS_REG;
 809              		.loc 1 1523 0 is_stmt 1 discriminator 1
 810 0050 114B     		ldr	r3, .L66+16
 811 0052 1B78     		ldrb	r3, [r3]
 812 0054 FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 42


1524:.\Generated_Source\PSoC5/Tx.c ****                 }
1525:.\Generated_Source\PSoC5/Tx.c ****                 while(((uint8)~tmpStat & Tx_TX_STS_COMPLETE) != 0u);
 813              		.loc 1 1525 0 discriminator 1
 814 0056 FB7B     		ldrb	r3, [r7, #15]
 815 0058 DB43     		mvns	r3, r3
 816 005a DBB2     		uxtb	r3, r3
 817 005c 03F00103 		and	r3, r3, #1
 818 0060 002B     		cmp	r3, #0
 819 0062 F5D1     		bne	.L63
 820              	.L64:
1526:.\Generated_Source\PSoC5/Tx.c ****             }
1527:.\Generated_Source\PSoC5/Tx.c **** 
1528:.\Generated_Source\PSoC5/Tx.c ****             if( (retMode == Tx_WAIT_FOR_COMPLETE_REINIT) ||
 821              		.loc 1 1528 0
 822 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 823 0066 012B     		cmp	r3, #1
 824 0068 05D0     		beq	.L65
 825              		.loc 1 1528 0 is_stmt 0 discriminator 1
 826 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 827 006c 022B     		cmp	r3, #2
 828 006e 02D0     		beq	.L65
1529:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_REINIT) ||
 829              		.loc 1 1529 0 is_stmt 1
 830 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 831 0072 032B     		cmp	r3, #3
 832 0074 03D1     		bne	.L58
 833              	.L65:
1530:.\Generated_Source\PSoC5/Tx.c ****                 (retMode == Tx_SEND_WAIT_REINIT) )
1531:.\Generated_Source\PSoC5/Tx.c ****             {
1532:.\Generated_Source\PSoC5/Tx.c **** 
1533:.\Generated_Source\PSoC5/Tx.c ****             #if(Tx_TXCLKGEN_DP)
1534:.\Generated_Source\PSoC5/Tx.c ****                 Tx_TXBITCLKTX_COMPLETE_REG = txPeriod;
 834              		.loc 1 1534 0
 835 0076 054B     		ldr	r3, .L66+4
 836 0078 054A     		ldr	r2, .L66+8
 837 007a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 838 007c 1A70     		strb	r2, [r3]
 839              	.L58:
 840              	.LBE2:
1535:.\Generated_Source\PSoC5/Tx.c ****             #else
1536:.\Generated_Source\PSoC5/Tx.c ****                 Tx_TXBITCTR_PERIOD_REG = txPeriod;
1537:.\Generated_Source\PSoC5/Tx.c ****             #endif /* End Tx_TXCLKGEN_DP */
1538:.\Generated_Source\PSoC5/Tx.c **** 
1539:.\Generated_Source\PSoC5/Tx.c ****             #if( (Tx_PARITY_TYPE != Tx__B_UART__NONE_REVB) || \
1540:.\Generated_Source\PSoC5/Tx.c ****                  (Tx_PARITY_TYPE_SW != 0u) )
1541:.\Generated_Source\PSoC5/Tx.c ****                 Tx_WriteControlRegister(Tx_ReadControlRegister() &
1542:.\Generated_Source\PSoC5/Tx.c ****                                                       (uint8) ~Tx_CTRL_HD_SEND_BREAK);
1543:.\Generated_Source\PSoC5/Tx.c ****             #endif /* End Tx_PARITY_TYPE != NONE */
1544:.\Generated_Source\PSoC5/Tx.c ****             }
1545:.\Generated_Source\PSoC5/Tx.c ****         #endif    /* End Tx_HD_ENABLED */
1546:.\Generated_Source\PSoC5/Tx.c ****         }
1547:.\Generated_Source\PSoC5/Tx.c ****     }
 841              		.loc 1 1547 0
 842 007e 1437     		adds	r7, r7, #20
 843 0080 BD46     		mov	sp, r7
 844              		@ sp needed
 845 0082 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 43


 846 0086 7047     		bx	lr
 847              	.L67:
 848              		.align	2
 849              	.L66:
 850 0088 00000000 		.word	Tx_initVar
 851 008c 3D640040 		.word	1073767485
 852 0090 01000000 		.word	txPeriod.4932
 853 0094 4C640040 		.word	1073767500
 854 0098 6C640040 		.word	1073767532
 855              		.cfi_endproc
 856              	.LFE15:
 857              		.size	Tx_SendBreak, .-Tx_SendBreak
 858              		.section	.text.Tx_SetTxAddressMode,"ax",%progbits
 859              		.align	2
 860              		.global	Tx_SetTxAddressMode
 861              		.thumb
 862              		.thumb_func
 863              		.type	Tx_SetTxAddressMode, %function
 864              	Tx_SetTxAddressMode:
 865              	.LFB16:
1548:.\Generated_Source\PSoC5/Tx.c **** 
1549:.\Generated_Source\PSoC5/Tx.c **** 
1550:.\Generated_Source\PSoC5/Tx.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC5/Tx.c ****     * Function Name: Tx_SetTxAddressMode
1552:.\Generated_Source\PSoC5/Tx.c ****     ********************************************************************************
1553:.\Generated_Source\PSoC5/Tx.c ****     *
1554:.\Generated_Source\PSoC5/Tx.c ****     * Summary:
1555:.\Generated_Source\PSoC5/Tx.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:.\Generated_Source\PSoC5/Tx.c ****     *
1557:.\Generated_Source\PSoC5/Tx.c ****     * Parameters:
1558:.\Generated_Source\PSoC5/Tx.c ****     *  addressMode: 
1559:.\Generated_Source\PSoC5/Tx.c ****     *       Tx_SET_SPACE - Configure the transmitter to send the next
1560:.\Generated_Source\PSoC5/Tx.c ****     *                                    byte as a data.
1561:.\Generated_Source\PSoC5/Tx.c ****     *       Tx_SET_MARK  - Configure the transmitter to send the next
1562:.\Generated_Source\PSoC5/Tx.c ****     *                                    byte as an address.
1563:.\Generated_Source\PSoC5/Tx.c ****     *
1564:.\Generated_Source\PSoC5/Tx.c ****     * Return:
1565:.\Generated_Source\PSoC5/Tx.c ****     *  None.
1566:.\Generated_Source\PSoC5/Tx.c ****     *
1567:.\Generated_Source\PSoC5/Tx.c ****     * Side Effects:
1568:.\Generated_Source\PSoC5/Tx.c ****     *  This function sets and clears Tx_CTRL_MARK bit in the Control
1569:.\Generated_Source\PSoC5/Tx.c ****     *  register.
1570:.\Generated_Source\PSoC5/Tx.c ****     *
1571:.\Generated_Source\PSoC5/Tx.c ****     *******************************************************************************/
1572:.\Generated_Source\PSoC5/Tx.c ****     void Tx_SetTxAddressMode(uint8 addressMode) 
1573:.\Generated_Source\PSoC5/Tx.c ****     {
 866              		.loc 1 1573 0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 8
 869              		@ frame_needed = 1, uses_anonymous_args = 0
 870              		@ link register save eliminated.
 871 0000 80B4     		push	{r7}
 872              		.cfi_def_cfa_offset 4
 873              		.cfi_offset 7, -4
 874 0002 83B0     		sub	sp, sp, #12
 875              		.cfi_def_cfa_offset 16
 876 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 44


 877              		.cfi_def_cfa_register 7
 878 0006 0346     		mov	r3, r0
 879 0008 FB71     		strb	r3, [r7, #7]
1574:.\Generated_Source\PSoC5/Tx.c ****         /* Mark/Space sending enable */
1575:.\Generated_Source\PSoC5/Tx.c ****         if(addressMode != 0u)
1576:.\Generated_Source\PSoC5/Tx.c ****         {
1577:.\Generated_Source\PSoC5/Tx.c ****         #if( Tx_CONTROL_REG_REMOVED == 0u )
1578:.\Generated_Source\PSoC5/Tx.c ****             Tx_WriteControlRegister(Tx_ReadControlRegister() |
1579:.\Generated_Source\PSoC5/Tx.c ****                                                   Tx_CTRL_MARK);
1580:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_CONTROL_REG_REMOVED == 0u */
1581:.\Generated_Source\PSoC5/Tx.c ****         }
1582:.\Generated_Source\PSoC5/Tx.c ****         else
1583:.\Generated_Source\PSoC5/Tx.c ****         {
1584:.\Generated_Source\PSoC5/Tx.c ****         #if( Tx_CONTROL_REG_REMOVED == 0u )
1585:.\Generated_Source\PSoC5/Tx.c ****             Tx_WriteControlRegister(Tx_ReadControlRegister() &
1586:.\Generated_Source\PSoC5/Tx.c ****                                                   (uint8) ~Tx_CTRL_MARK);
1587:.\Generated_Source\PSoC5/Tx.c ****         #endif /* End Tx_CONTROL_REG_REMOVED == 0u */
1588:.\Generated_Source\PSoC5/Tx.c ****         }
1589:.\Generated_Source\PSoC5/Tx.c ****     }
 880              		.loc 1 1589 0
 881 000a 0C37     		adds	r7, r7, #12
 882 000c BD46     		mov	sp, r7
 883              		@ sp needed
 884 000e 5DF8047B 		ldr	r7, [sp], #4
 885 0012 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE16:
 888              		.size	Tx_SetTxAddressMode, .-Tx_SetTxAddressMode
 889              		.bss
 890              	txPeriod.4932:
 891 0001 00       		.space	1
 892              		.text
 893              	.Letext0:
 894              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 895              		.section	.debug_info,"",%progbits
 896              	.Ldebug_info0:
 897 0000 71030000 		.4byte	0x371
 898 0004 0400     		.2byte	0x4
 899 0006 00000000 		.4byte	.Ldebug_abbrev0
 900 000a 04       		.byte	0x4
 901 000b 01       		.uleb128 0x1
 902 000c 1D010000 		.4byte	.LASF45
 903 0010 01       		.byte	0x1
 904 0011 79000000 		.4byte	.LASF46
 905 0015 30000000 		.4byte	.LASF47
 906 0019 00000000 		.4byte	.Ldebug_ranges0+0
 907 001d 00000000 		.4byte	0
 908 0021 00000000 		.4byte	.Ldebug_line0
 909 0025 02       		.uleb128 0x2
 910 0026 01       		.byte	0x1
 911 0027 06       		.byte	0x6
 912 0028 E5020000 		.4byte	.LASF0
 913 002c 02       		.uleb128 0x2
 914 002d 01       		.byte	0x1
 915 002e 08       		.byte	0x8
 916 002f E1010000 		.4byte	.LASF1
 917 0033 02       		.uleb128 0x2
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 45


 918 0034 02       		.byte	0x2
 919 0035 05       		.byte	0x5
 920 0036 D2020000 		.4byte	.LASF2
 921 003a 02       		.uleb128 0x2
 922 003b 02       		.byte	0x2
 923 003c 07       		.byte	0x7
 924 003d A1000000 		.4byte	.LASF3
 925 0041 02       		.uleb128 0x2
 926 0042 04       		.byte	0x4
 927 0043 05       		.byte	0x5
 928 0044 DC020000 		.4byte	.LASF4
 929 0048 02       		.uleb128 0x2
 930 0049 04       		.byte	0x4
 931 004a 07       		.byte	0x7
 932 004b 99010000 		.4byte	.LASF5
 933 004f 02       		.uleb128 0x2
 934 0050 08       		.byte	0x8
 935 0051 05       		.byte	0x5
 936 0052 00000000 		.4byte	.LASF6
 937 0056 02       		.uleb128 0x2
 938 0057 08       		.byte	0x8
 939 0058 07       		.byte	0x7
 940 0059 27020000 		.4byte	.LASF7
 941 005d 03       		.uleb128 0x3
 942 005e 04       		.byte	0x4
 943 005f 05       		.byte	0x5
 944 0060 696E7400 		.ascii	"int\000"
 945 0064 02       		.uleb128 0x2
 946 0065 04       		.byte	0x4
 947 0066 07       		.byte	0x7
 948 0067 15020000 		.4byte	.LASF8
 949 006b 04       		.uleb128 0x4
 950 006c AB010000 		.4byte	.LASF9
 951 0070 02       		.byte	0x2
 952 0071 A1       		.byte	0xa1
 953 0072 2C000000 		.4byte	0x2c
 954 0076 04       		.uleb128 0x4
 955 0077 0E020000 		.4byte	.LASF10
 956 007b 02       		.byte	0x2
 957 007c A2       		.byte	0xa2
 958 007d 3A000000 		.4byte	0x3a
 959 0081 02       		.uleb128 0x2
 960 0082 04       		.byte	0x4
 961 0083 04       		.byte	0x4
 962 0084 E7000000 		.4byte	.LASF11
 963 0088 02       		.uleb128 0x2
 964 0089 08       		.byte	0x8
 965 008a 04       		.byte	0x4
 966 008b B4000000 		.4byte	.LASF12
 967 008f 04       		.uleb128 0x4
 968 0090 6B020000 		.4byte	.LASF13
 969 0094 02       		.byte	0x2
 970 0095 B2       		.byte	0xb2
 971 0096 9A000000 		.4byte	0x9a
 972 009a 02       		.uleb128 0x2
 973 009b 01       		.byte	0x1
 974 009c 08       		.byte	0x8
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 46


 975 009d A5020000 		.4byte	.LASF14
 976 00a1 05       		.uleb128 0x5
 977 00a2 08010000 		.4byte	.LASF15
 978 00a6 02       		.byte	0x2
 979 00a7 4B01     		.2byte	0x14b
 980 00a9 AD000000 		.4byte	0xad
 981 00ad 06       		.uleb128 0x6
 982 00ae 6B000000 		.4byte	0x6b
 983 00b2 02       		.uleb128 0x2
 984 00b3 04       		.byte	0x4
 985 00b4 07       		.byte	0x7
 986 00b5 62020000 		.4byte	.LASF16
 987 00b9 07       		.uleb128 0x7
 988 00ba AA020000 		.4byte	.LASF17
 989 00be 01       		.byte	0x1
 990 00bf 4C       		.byte	0x4c
 991 00c0 00000000 		.4byte	.LFB0
 992 00c4 20000000 		.4byte	.LFE0-.LFB0
 993 00c8 01       		.uleb128 0x1
 994 00c9 9C       		.byte	0x9c
 995 00ca 08       		.uleb128 0x8
 996 00cb 3E020000 		.4byte	.LASF18
 997 00cf 01       		.byte	0x1
 998 00d0 6A       		.byte	0x6a
 999 00d1 00000000 		.4byte	.LFB1
 1000 00d5 2C000000 		.4byte	.LFE1-.LFB1
 1001 00d9 01       		.uleb128 0x1
 1002 00da 9C       		.byte	0x9c
 1003 00db 09       		.uleb128 0x9
 1004 00dc 97000000 		.4byte	.LASF19
 1005 00e0 01       		.byte	0x1
 1006 00e1 B7       		.byte	0xb7
 1007 00e2 00000000 		.4byte	.LFB2
 1008 00e6 34000000 		.4byte	.LFE2-.LFB2
 1009 00ea 01       		.uleb128 0x1
 1010 00eb 9C       		.byte	0x9c
 1011 00ec FF000000 		.4byte	0xff
 1012 00f0 0A       		.uleb128 0xa
 1013 00f1 71020000 		.4byte	.LASF21
 1014 00f5 01       		.byte	0x1
 1015 00f6 B9       		.byte	0xb9
 1016 00f7 6B000000 		.4byte	0x6b
 1017 00fb 02       		.uleb128 0x2
 1018 00fc 91       		.byte	0x91
 1019 00fd 77       		.sleb128 -9
 1020 00fe 00       		.byte	0
 1021 00ff 09       		.uleb128 0x9
 1022 0100 FC020000 		.4byte	.LASF20
 1023 0104 01       		.byte	0x1
 1024 0105 F0       		.byte	0xf0
 1025 0106 00000000 		.4byte	.LFB3
 1026 010a 34000000 		.4byte	.LFE3-.LFB3
 1027 010e 01       		.uleb128 0x1
 1028 010f 9C       		.byte	0x9c
 1029 0110 23010000 		.4byte	0x123
 1030 0114 0A       		.uleb128 0xa
 1031 0115 71020000 		.4byte	.LASF21
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 47


 1032 0119 01       		.byte	0x1
 1033 011a F2       		.byte	0xf2
 1034 011b 6B000000 		.4byte	0x6b
 1035 011f 02       		.uleb128 0x2
 1036 0120 91       		.byte	0x91
 1037 0121 77       		.sleb128 -9
 1038 0122 00       		.byte	0
 1039 0123 0B       		.uleb128 0xb
 1040 0124 BB020000 		.4byte	.LASF28
 1041 0128 01       		.byte	0x1
 1042 0129 2701     		.2byte	0x127
 1043 012b 6B000000 		.4byte	0x6b
 1044 012f 00000000 		.4byte	.LFB4
 1045 0133 10000000 		.4byte	.LFE4-.LFB4
 1046 0137 01       		.uleb128 0x1
 1047 0138 9C       		.byte	0x9c
 1048 0139 0C       		.uleb128 0xc
 1049 013a 8D020000 		.4byte	.LASF22
 1050 013e 01       		.byte	0x1
 1051 013f 3F01     		.2byte	0x13f
 1052 0141 00000000 		.4byte	.LFB5
 1053 0145 14000000 		.4byte	.LFE5-.LFB5
 1054 0149 01       		.uleb128 0x1
 1055 014a 9C       		.byte	0x9c
 1056 014b 5F010000 		.4byte	0x15f
 1057 014f 0D       		.uleb128 0xd
 1058 0150 B1010000 		.4byte	.LASF24
 1059 0154 01       		.byte	0x1
 1060 0155 3F01     		.2byte	0x13f
 1061 0157 6B000000 		.4byte	0x6b
 1062 015b 02       		.uleb128 0x2
 1063 015c 91       		.byte	0x91
 1064 015d 77       		.sleb128 -9
 1065 015e 00       		.byte	0
 1066 015f 0C       		.uleb128 0xc
 1067 0160 CB010000 		.4byte	.LASF23
 1068 0164 01       		.byte	0x1
 1069 0165 8C03     		.2byte	0x38c
 1070 0167 00000000 		.4byte	.LFB6
 1071 016b 20000000 		.4byte	.LFE6-.LFB6
 1072 016f 01       		.uleb128 0x1
 1073 0170 9C       		.byte	0x9c
 1074 0171 85010000 		.4byte	0x185
 1075 0175 0D       		.uleb128 0xd
 1076 0176 FC010000 		.4byte	.LASF25
 1077 017a 01       		.byte	0x1
 1078 017b 8C03     		.2byte	0x38c
 1079 017d 6B000000 		.4byte	0x6b
 1080 0181 02       		.uleb128 0x2
 1081 0182 91       		.byte	0x91
 1082 0183 77       		.sleb128 -9
 1083 0184 00       		.byte	0
 1084 0185 0C       		.uleb128 0xc
 1085 0186 F9000000 		.4byte	.LASF26
 1086 018a 01       		.byte	0x1
 1087 018b AE03     		.2byte	0x3ae
 1088 018d 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 48


 1089 0191 2C000000 		.4byte	.LFE7-.LFB7
 1090 0195 01       		.uleb128 0x1
 1091 0196 9C       		.byte	0x9c
 1092 0197 AB010000 		.4byte	0x1ab
 1093 019b 0D       		.uleb128 0xd
 1094 019c 82020000 		.4byte	.LASF27
 1095 01a0 01       		.byte	0x1
 1096 01a1 AE03     		.2byte	0x3ae
 1097 01a3 6B000000 		.4byte	0x6b
 1098 01a7 02       		.uleb128 0x2
 1099 01a8 91       		.byte	0x91
 1100 01a9 77       		.sleb128 -9
 1101 01aa 00       		.byte	0
 1102 01ab 0B       		.uleb128 0xb
 1103 01ac 0D010000 		.4byte	.LASF29
 1104 01b0 01       		.byte	0x1
 1105 01b1 EB03     		.2byte	0x3eb
 1106 01b3 6B000000 		.4byte	0x6b
 1107 01b7 00000000 		.4byte	.LFB8
 1108 01bb 18000000 		.4byte	.LFE8-.LFB8
 1109 01bf 01       		.uleb128 0x1
 1110 01c0 9C       		.byte	0x9c
 1111 01c1 0C       		.uleb128 0xc
 1112 01c2 04030000 		.4byte	.LASF30
 1113 01c6 01       		.byte	0x1
 1114 01c7 1104     		.2byte	0x411
 1115 01c9 00000000 		.4byte	.LFB9
 1116 01cd 34000000 		.4byte	.LFE9-.LFB9
 1117 01d1 01       		.uleb128 0x1
 1118 01d2 9C       		.byte	0x9c
 1119 01d3 E7010000 		.4byte	0x1e7
 1120 01d7 0D       		.uleb128 0xd
 1121 01d8 82020000 		.4byte	.LASF27
 1122 01dc 01       		.byte	0x1
 1123 01dd 1104     		.2byte	0x411
 1124 01df 6B000000 		.4byte	0x6b
 1125 01e3 02       		.uleb128 0x2
 1126 01e4 91       		.byte	0x91
 1127 01e5 77       		.sleb128 -9
 1128 01e6 00       		.byte	0
 1129 01e7 0E       		.uleb128 0xe
 1130 01e8 EF010000 		.4byte	.LASF31
 1131 01ec 01       		.byte	0x1
 1132 01ed 7904     		.2byte	0x479
 1133 01ef 00000000 		.4byte	.LFB10
 1134 01f3 40000000 		.4byte	.LFE10-.LFB10
 1135 01f7 01       		.uleb128 0x1
 1136 01f8 9C       		.byte	0x9c
 1137 01f9 1C020000 		.4byte	0x21c
 1138 01fd 0D       		.uleb128 0xd
 1139 01fe CF000000 		.4byte	.LASF32
 1140 0202 01       		.byte	0x1
 1141 0203 7904     		.2byte	0x479
 1142 0205 1C020000 		.4byte	0x21c
 1143 0209 02       		.uleb128 0x2
 1144 020a 91       		.byte	0x91
 1145 020b 6C       		.sleb128 -20
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 49


 1146 020c 0F       		.uleb128 0xf
 1147 020d 46020000 		.4byte	.LASF33
 1148 0211 01       		.byte	0x1
 1149 0212 7B04     		.2byte	0x47b
 1150 0214 76000000 		.4byte	0x76
 1151 0218 02       		.uleb128 0x2
 1152 0219 91       		.byte	0x91
 1153 021a 76       		.sleb128 -10
 1154 021b 00       		.byte	0
 1155 021c 10       		.uleb128 0x10
 1156 021d 04       		.byte	0x4
 1157 021e 22020000 		.4byte	0x222
 1158 0222 11       		.uleb128 0x11
 1159 0223 8F000000 		.4byte	0x8f
 1160 0227 0E       		.uleb128 0xe
 1161 0228 0E000000 		.4byte	.LASF34
 1162 022c 01       		.byte	0x1
 1163 022d A704     		.2byte	0x4a7
 1164 022f 00000000 		.4byte	.LFB11
 1165 0233 40000000 		.4byte	.LFE11-.LFB11
 1166 0237 01       		.uleb128 0x1
 1167 0238 9C       		.byte	0x9c
 1168 0239 6B020000 		.4byte	0x26b
 1169 023d 0D       		.uleb128 0xd
 1170 023e CF000000 		.4byte	.LASF32
 1171 0242 01       		.byte	0x1
 1172 0243 A704     		.2byte	0x4a7
 1173 0245 6B020000 		.4byte	0x26b
 1174 0249 02       		.uleb128 0x2
 1175 024a 91       		.byte	0x91
 1176 024b 6C       		.sleb128 -20
 1177 024c 0D       		.uleb128 0xd
 1178 024d C1010000 		.4byte	.LASF35
 1179 0251 01       		.byte	0x1
 1180 0252 A704     		.2byte	0x4a7
 1181 0254 6B000000 		.4byte	0x6b
 1182 0258 02       		.uleb128 0x2
 1183 0259 91       		.byte	0x91
 1184 025a 6B       		.sleb128 -21
 1185 025b 0F       		.uleb128 0xf
 1186 025c 46020000 		.4byte	.LASF33
 1187 0260 01       		.byte	0x1
 1188 0261 AA04     		.2byte	0x4aa
 1189 0263 6B000000 		.4byte	0x6b
 1190 0267 02       		.uleb128 0x2
 1191 0268 91       		.byte	0x91
 1192 0269 77       		.sleb128 -9
 1193 026a 00       		.byte	0
 1194 026b 10       		.uleb128 0x10
 1195 026c 04       		.byte	0x4
 1196 026d 71020000 		.4byte	0x271
 1197 0271 11       		.uleb128 0x11
 1198 0272 6B000000 		.4byte	0x6b
 1199 0276 0E       		.uleb128 0xe
 1200 0277 F1020000 		.4byte	.LASF36
 1201 027b 01       		.byte	0x1
 1202 027c CE04     		.2byte	0x4ce
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 50


 1203 027e 00000000 		.4byte	.LFB12
 1204 0282 30000000 		.4byte	.LFE12-.LFB12
 1205 0286 01       		.uleb128 0x1
 1206 0287 9C       		.byte	0x9c
 1207 0288 9C020000 		.4byte	0x29c
 1208 028c 0D       		.uleb128 0xd
 1209 028d 82020000 		.4byte	.LASF27
 1210 0291 01       		.byte	0x1
 1211 0292 CE04     		.2byte	0x4ce
 1212 0294 6B000000 		.4byte	0x6b
 1213 0298 02       		.uleb128 0x2
 1214 0299 91       		.byte	0x91
 1215 029a 77       		.sleb128 -9
 1216 029b 00       		.byte	0
 1217 029c 12       		.uleb128 0x12
 1218 029d 4F020000 		.4byte	.LASF48
 1219 02a1 01       		.byte	0x1
 1220 02a2 F904     		.2byte	0x4f9
 1221 02a4 6B000000 		.4byte	0x6b
 1222 02a8 00000000 		.4byte	.LFB13
 1223 02ac 44000000 		.4byte	.LFE13-.LFB13
 1224 02b0 01       		.uleb128 0x1
 1225 02b1 9C       		.byte	0x9c
 1226 02b2 C6020000 		.4byte	0x2c6
 1227 02b6 0F       		.uleb128 0xf
 1228 02b7 22020000 		.4byte	.LASF37
 1229 02bb 01       		.byte	0x1
 1230 02bc FC04     		.2byte	0x4fc
 1231 02be 6B000000 		.4byte	0x6b
 1232 02c2 02       		.uleb128 0x2
 1233 02c3 91       		.byte	0x91
 1234 02c4 77       		.sleb128 -9
 1235 02c5 00       		.byte	0
 1236 02c6 0E       		.uleb128 0xe
 1237 02c7 D6000000 		.4byte	.LASF38
 1238 02cb 01       		.byte	0x1
 1239 02cc 4A05     		.2byte	0x54a
 1240 02ce 00000000 		.4byte	.LFB14
 1241 02d2 40000000 		.4byte	.LFE14-.LFB14
 1242 02d6 01       		.uleb128 0x1
 1243 02d7 9C       		.byte	0x9c
 1244 02d8 EC020000 		.4byte	0x2ec
 1245 02dc 0F       		.uleb128 0xf
 1246 02dd 71020000 		.4byte	.LASF21
 1247 02e1 01       		.byte	0x1
 1248 02e2 4C05     		.2byte	0x54c
 1249 02e4 6B000000 		.4byte	0x6b
 1250 02e8 02       		.uleb128 0x2
 1251 02e9 91       		.byte	0x91
 1252 02ea 77       		.sleb128 -9
 1253 02eb 00       		.byte	0
 1254 02ec 0C       		.uleb128 0xc
 1255 02ed 1A000000 		.4byte	.LASF39
 1256 02f1 01       		.byte	0x1
 1257 02f2 A005     		.2byte	0x5a0
 1258 02f4 00000000 		.4byte	.LFB15
 1259 02f8 9C000000 		.4byte	.LFE15-.LFB15
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 51


 1260 02fc 01       		.uleb128 0x1
 1261 02fd 9C       		.byte	0x9c
 1262 02fe 3D030000 		.4byte	0x33d
 1263 0302 0D       		.uleb128 0xd
 1264 0303 B3020000 		.4byte	.LASF40
 1265 0307 01       		.byte	0x1
 1266 0308 A005     		.2byte	0x5a0
 1267 030a 6B000000 		.4byte	0x6b
 1268 030e 02       		.uleb128 0x2
 1269 030f 91       		.byte	0x91
 1270 0310 6F       		.sleb128 -17
 1271 0311 13       		.uleb128 0x13
 1272 0312 12000000 		.4byte	.LBB2
 1273 0316 6C000000 		.4byte	.LBE2-.LBB2
 1274 031a 0F       		.uleb128 0xf
 1275 031b B9010000 		.4byte	.LASF41
 1276 031f 01       		.byte	0x1
 1277 0320 A805     		.2byte	0x5a8
 1278 0322 6B000000 		.4byte	0x6b
 1279 0326 02       		.uleb128 0x2
 1280 0327 91       		.byte	0x91
 1281 0328 77       		.sleb128 -9
 1282 0329 0F       		.uleb128 0xf
 1283 032a 27000000 		.4byte	.LASF42
 1284 032e 01       		.byte	0x1
 1285 032f D005     		.2byte	0x5d0
 1286 0331 6B000000 		.4byte	0x6b
 1287 0335 05       		.uleb128 0x5
 1288 0336 03       		.byte	0x3
 1289 0337 01000000 		.4byte	txPeriod.4932
 1290 033b 00       		.byte	0
 1291 033c 00       		.byte	0
 1292 033d 0C       		.uleb128 0xc
 1293 033e BB000000 		.4byte	.LASF43
 1294 0342 01       		.byte	0x1
 1295 0343 2406     		.2byte	0x624
 1296 0345 00000000 		.4byte	.LFB16
 1297 0349 14000000 		.4byte	.LFE16-.LFB16
 1298 034d 01       		.uleb128 0x1
 1299 034e 9C       		.byte	0x9c
 1300 034f 63030000 		.4byte	0x363
 1301 0353 0D       		.uleb128 0xd
 1302 0354 ED000000 		.4byte	.LASF44
 1303 0358 01       		.byte	0x1
 1304 0359 2406     		.2byte	0x624
 1305 035b 6B000000 		.4byte	0x6b
 1306 035f 02       		.uleb128 0x2
 1307 0360 91       		.byte	0x91
 1308 0361 77       		.sleb128 -9
 1309 0362 00       		.byte	0
 1310 0363 14       		.uleb128 0x14
 1311 0364 03020000 		.4byte	.LASF49
 1312 0368 01       		.byte	0x1
 1313 0369 1B       		.byte	0x1b
 1314 036a 6B000000 		.4byte	0x6b
 1315 036e 05       		.uleb128 0x5
 1316 036f 03       		.byte	0x3
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 52


 1317 0370 00000000 		.4byte	Tx_initVar
 1318 0374 00       		.byte	0
 1319              		.section	.debug_abbrev,"",%progbits
 1320              	.Ldebug_abbrev0:
 1321 0000 01       		.uleb128 0x1
 1322 0001 11       		.uleb128 0x11
 1323 0002 01       		.byte	0x1
 1324 0003 25       		.uleb128 0x25
 1325 0004 0E       		.uleb128 0xe
 1326 0005 13       		.uleb128 0x13
 1327 0006 0B       		.uleb128 0xb
 1328 0007 03       		.uleb128 0x3
 1329 0008 0E       		.uleb128 0xe
 1330 0009 1B       		.uleb128 0x1b
 1331 000a 0E       		.uleb128 0xe
 1332 000b 55       		.uleb128 0x55
 1333 000c 17       		.uleb128 0x17
 1334 000d 11       		.uleb128 0x11
 1335 000e 01       		.uleb128 0x1
 1336 000f 10       		.uleb128 0x10
 1337 0010 17       		.uleb128 0x17
 1338 0011 00       		.byte	0
 1339 0012 00       		.byte	0
 1340 0013 02       		.uleb128 0x2
 1341 0014 24       		.uleb128 0x24
 1342 0015 00       		.byte	0
 1343 0016 0B       		.uleb128 0xb
 1344 0017 0B       		.uleb128 0xb
 1345 0018 3E       		.uleb128 0x3e
 1346 0019 0B       		.uleb128 0xb
 1347 001a 03       		.uleb128 0x3
 1348 001b 0E       		.uleb128 0xe
 1349 001c 00       		.byte	0
 1350 001d 00       		.byte	0
 1351 001e 03       		.uleb128 0x3
 1352 001f 24       		.uleb128 0x24
 1353 0020 00       		.byte	0
 1354 0021 0B       		.uleb128 0xb
 1355 0022 0B       		.uleb128 0xb
 1356 0023 3E       		.uleb128 0x3e
 1357 0024 0B       		.uleb128 0xb
 1358 0025 03       		.uleb128 0x3
 1359 0026 08       		.uleb128 0x8
 1360 0027 00       		.byte	0
 1361 0028 00       		.byte	0
 1362 0029 04       		.uleb128 0x4
 1363 002a 16       		.uleb128 0x16
 1364 002b 00       		.byte	0
 1365 002c 03       		.uleb128 0x3
 1366 002d 0E       		.uleb128 0xe
 1367 002e 3A       		.uleb128 0x3a
 1368 002f 0B       		.uleb128 0xb
 1369 0030 3B       		.uleb128 0x3b
 1370 0031 0B       		.uleb128 0xb
 1371 0032 49       		.uleb128 0x49
 1372 0033 13       		.uleb128 0x13
 1373 0034 00       		.byte	0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 53


 1374 0035 00       		.byte	0
 1375 0036 05       		.uleb128 0x5
 1376 0037 16       		.uleb128 0x16
 1377 0038 00       		.byte	0
 1378 0039 03       		.uleb128 0x3
 1379 003a 0E       		.uleb128 0xe
 1380 003b 3A       		.uleb128 0x3a
 1381 003c 0B       		.uleb128 0xb
 1382 003d 3B       		.uleb128 0x3b
 1383 003e 05       		.uleb128 0x5
 1384 003f 49       		.uleb128 0x49
 1385 0040 13       		.uleb128 0x13
 1386 0041 00       		.byte	0
 1387 0042 00       		.byte	0
 1388 0043 06       		.uleb128 0x6
 1389 0044 35       		.uleb128 0x35
 1390 0045 00       		.byte	0
 1391 0046 49       		.uleb128 0x49
 1392 0047 13       		.uleb128 0x13
 1393 0048 00       		.byte	0
 1394 0049 00       		.byte	0
 1395 004a 07       		.uleb128 0x7
 1396 004b 2E       		.uleb128 0x2e
 1397 004c 00       		.byte	0
 1398 004d 3F       		.uleb128 0x3f
 1399 004e 19       		.uleb128 0x19
 1400 004f 03       		.uleb128 0x3
 1401 0050 0E       		.uleb128 0xe
 1402 0051 3A       		.uleb128 0x3a
 1403 0052 0B       		.uleb128 0xb
 1404 0053 3B       		.uleb128 0x3b
 1405 0054 0B       		.uleb128 0xb
 1406 0055 27       		.uleb128 0x27
 1407 0056 19       		.uleb128 0x19
 1408 0057 11       		.uleb128 0x11
 1409 0058 01       		.uleb128 0x1
 1410 0059 12       		.uleb128 0x12
 1411 005a 06       		.uleb128 0x6
 1412 005b 40       		.uleb128 0x40
 1413 005c 18       		.uleb128 0x18
 1414 005d 9642     		.uleb128 0x2116
 1415 005f 19       		.uleb128 0x19
 1416 0060 00       		.byte	0
 1417 0061 00       		.byte	0
 1418 0062 08       		.uleb128 0x8
 1419 0063 2E       		.uleb128 0x2e
 1420 0064 00       		.byte	0
 1421 0065 3F       		.uleb128 0x3f
 1422 0066 19       		.uleb128 0x19
 1423 0067 03       		.uleb128 0x3
 1424 0068 0E       		.uleb128 0xe
 1425 0069 3A       		.uleb128 0x3a
 1426 006a 0B       		.uleb128 0xb
 1427 006b 3B       		.uleb128 0x3b
 1428 006c 0B       		.uleb128 0xb
 1429 006d 27       		.uleb128 0x27
 1430 006e 19       		.uleb128 0x19
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 54


 1431 006f 11       		.uleb128 0x11
 1432 0070 01       		.uleb128 0x1
 1433 0071 12       		.uleb128 0x12
 1434 0072 06       		.uleb128 0x6
 1435 0073 40       		.uleb128 0x40
 1436 0074 18       		.uleb128 0x18
 1437 0075 9742     		.uleb128 0x2117
 1438 0077 19       		.uleb128 0x19
 1439 0078 00       		.byte	0
 1440 0079 00       		.byte	0
 1441 007a 09       		.uleb128 0x9
 1442 007b 2E       		.uleb128 0x2e
 1443 007c 01       		.byte	0x1
 1444 007d 3F       		.uleb128 0x3f
 1445 007e 19       		.uleb128 0x19
 1446 007f 03       		.uleb128 0x3
 1447 0080 0E       		.uleb128 0xe
 1448 0081 3A       		.uleb128 0x3a
 1449 0082 0B       		.uleb128 0xb
 1450 0083 3B       		.uleb128 0x3b
 1451 0084 0B       		.uleb128 0xb
 1452 0085 27       		.uleb128 0x27
 1453 0086 19       		.uleb128 0x19
 1454 0087 11       		.uleb128 0x11
 1455 0088 01       		.uleb128 0x1
 1456 0089 12       		.uleb128 0x12
 1457 008a 06       		.uleb128 0x6
 1458 008b 40       		.uleb128 0x40
 1459 008c 18       		.uleb128 0x18
 1460 008d 9642     		.uleb128 0x2116
 1461 008f 19       		.uleb128 0x19
 1462 0090 01       		.uleb128 0x1
 1463 0091 13       		.uleb128 0x13
 1464 0092 00       		.byte	0
 1465 0093 00       		.byte	0
 1466 0094 0A       		.uleb128 0xa
 1467 0095 34       		.uleb128 0x34
 1468 0096 00       		.byte	0
 1469 0097 03       		.uleb128 0x3
 1470 0098 0E       		.uleb128 0xe
 1471 0099 3A       		.uleb128 0x3a
 1472 009a 0B       		.uleb128 0xb
 1473 009b 3B       		.uleb128 0x3b
 1474 009c 0B       		.uleb128 0xb
 1475 009d 49       		.uleb128 0x49
 1476 009e 13       		.uleb128 0x13
 1477 009f 02       		.uleb128 0x2
 1478 00a0 18       		.uleb128 0x18
 1479 00a1 00       		.byte	0
 1480 00a2 00       		.byte	0
 1481 00a3 0B       		.uleb128 0xb
 1482 00a4 2E       		.uleb128 0x2e
 1483 00a5 00       		.byte	0
 1484 00a6 3F       		.uleb128 0x3f
 1485 00a7 19       		.uleb128 0x19
 1486 00a8 03       		.uleb128 0x3
 1487 00a9 0E       		.uleb128 0xe
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 55


 1488 00aa 3A       		.uleb128 0x3a
 1489 00ab 0B       		.uleb128 0xb
 1490 00ac 3B       		.uleb128 0x3b
 1491 00ad 05       		.uleb128 0x5
 1492 00ae 27       		.uleb128 0x27
 1493 00af 19       		.uleb128 0x19
 1494 00b0 49       		.uleb128 0x49
 1495 00b1 13       		.uleb128 0x13
 1496 00b2 11       		.uleb128 0x11
 1497 00b3 01       		.uleb128 0x1
 1498 00b4 12       		.uleb128 0x12
 1499 00b5 06       		.uleb128 0x6
 1500 00b6 40       		.uleb128 0x40
 1501 00b7 18       		.uleb128 0x18
 1502 00b8 9742     		.uleb128 0x2117
 1503 00ba 19       		.uleb128 0x19
 1504 00bb 00       		.byte	0
 1505 00bc 00       		.byte	0
 1506 00bd 0C       		.uleb128 0xc
 1507 00be 2E       		.uleb128 0x2e
 1508 00bf 01       		.byte	0x1
 1509 00c0 3F       		.uleb128 0x3f
 1510 00c1 19       		.uleb128 0x19
 1511 00c2 03       		.uleb128 0x3
 1512 00c3 0E       		.uleb128 0xe
 1513 00c4 3A       		.uleb128 0x3a
 1514 00c5 0B       		.uleb128 0xb
 1515 00c6 3B       		.uleb128 0x3b
 1516 00c7 05       		.uleb128 0x5
 1517 00c8 27       		.uleb128 0x27
 1518 00c9 19       		.uleb128 0x19
 1519 00ca 11       		.uleb128 0x11
 1520 00cb 01       		.uleb128 0x1
 1521 00cc 12       		.uleb128 0x12
 1522 00cd 06       		.uleb128 0x6
 1523 00ce 40       		.uleb128 0x40
 1524 00cf 18       		.uleb128 0x18
 1525 00d0 9742     		.uleb128 0x2117
 1526 00d2 19       		.uleb128 0x19
 1527 00d3 01       		.uleb128 0x1
 1528 00d4 13       		.uleb128 0x13
 1529 00d5 00       		.byte	0
 1530 00d6 00       		.byte	0
 1531 00d7 0D       		.uleb128 0xd
 1532 00d8 05       		.uleb128 0x5
 1533 00d9 00       		.byte	0
 1534 00da 03       		.uleb128 0x3
 1535 00db 0E       		.uleb128 0xe
 1536 00dc 3A       		.uleb128 0x3a
 1537 00dd 0B       		.uleb128 0xb
 1538 00de 3B       		.uleb128 0x3b
 1539 00df 05       		.uleb128 0x5
 1540 00e0 49       		.uleb128 0x49
 1541 00e1 13       		.uleb128 0x13
 1542 00e2 02       		.uleb128 0x2
 1543 00e3 18       		.uleb128 0x18
 1544 00e4 00       		.byte	0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 56


 1545 00e5 00       		.byte	0
 1546 00e6 0E       		.uleb128 0xe
 1547 00e7 2E       		.uleb128 0x2e
 1548 00e8 01       		.byte	0x1
 1549 00e9 3F       		.uleb128 0x3f
 1550 00ea 19       		.uleb128 0x19
 1551 00eb 03       		.uleb128 0x3
 1552 00ec 0E       		.uleb128 0xe
 1553 00ed 3A       		.uleb128 0x3a
 1554 00ee 0B       		.uleb128 0xb
 1555 00ef 3B       		.uleb128 0x3b
 1556 00f0 05       		.uleb128 0x5
 1557 00f1 27       		.uleb128 0x27
 1558 00f2 19       		.uleb128 0x19
 1559 00f3 11       		.uleb128 0x11
 1560 00f4 01       		.uleb128 0x1
 1561 00f5 12       		.uleb128 0x12
 1562 00f6 06       		.uleb128 0x6
 1563 00f7 40       		.uleb128 0x40
 1564 00f8 18       		.uleb128 0x18
 1565 00f9 9642     		.uleb128 0x2116
 1566 00fb 19       		.uleb128 0x19
 1567 00fc 01       		.uleb128 0x1
 1568 00fd 13       		.uleb128 0x13
 1569 00fe 00       		.byte	0
 1570 00ff 00       		.byte	0
 1571 0100 0F       		.uleb128 0xf
 1572 0101 34       		.uleb128 0x34
 1573 0102 00       		.byte	0
 1574 0103 03       		.uleb128 0x3
 1575 0104 0E       		.uleb128 0xe
 1576 0105 3A       		.uleb128 0x3a
 1577 0106 0B       		.uleb128 0xb
 1578 0107 3B       		.uleb128 0x3b
 1579 0108 05       		.uleb128 0x5
 1580 0109 49       		.uleb128 0x49
 1581 010a 13       		.uleb128 0x13
 1582 010b 02       		.uleb128 0x2
 1583 010c 18       		.uleb128 0x18
 1584 010d 00       		.byte	0
 1585 010e 00       		.byte	0
 1586 010f 10       		.uleb128 0x10
 1587 0110 0F       		.uleb128 0xf
 1588 0111 00       		.byte	0
 1589 0112 0B       		.uleb128 0xb
 1590 0113 0B       		.uleb128 0xb
 1591 0114 49       		.uleb128 0x49
 1592 0115 13       		.uleb128 0x13
 1593 0116 00       		.byte	0
 1594 0117 00       		.byte	0
 1595 0118 11       		.uleb128 0x11
 1596 0119 26       		.uleb128 0x26
 1597 011a 00       		.byte	0
 1598 011b 49       		.uleb128 0x49
 1599 011c 13       		.uleb128 0x13
 1600 011d 00       		.byte	0
 1601 011e 00       		.byte	0
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 57


 1602 011f 12       		.uleb128 0x12
 1603 0120 2E       		.uleb128 0x2e
 1604 0121 01       		.byte	0x1
 1605 0122 3F       		.uleb128 0x3f
 1606 0123 19       		.uleb128 0x19
 1607 0124 03       		.uleb128 0x3
 1608 0125 0E       		.uleb128 0xe
 1609 0126 3A       		.uleb128 0x3a
 1610 0127 0B       		.uleb128 0xb
 1611 0128 3B       		.uleb128 0x3b
 1612 0129 05       		.uleb128 0x5
 1613 012a 27       		.uleb128 0x27
 1614 012b 19       		.uleb128 0x19
 1615 012c 49       		.uleb128 0x49
 1616 012d 13       		.uleb128 0x13
 1617 012e 11       		.uleb128 0x11
 1618 012f 01       		.uleb128 0x1
 1619 0130 12       		.uleb128 0x12
 1620 0131 06       		.uleb128 0x6
 1621 0132 40       		.uleb128 0x40
 1622 0133 18       		.uleb128 0x18
 1623 0134 9742     		.uleb128 0x2117
 1624 0136 19       		.uleb128 0x19
 1625 0137 01       		.uleb128 0x1
 1626 0138 13       		.uleb128 0x13
 1627 0139 00       		.byte	0
 1628 013a 00       		.byte	0
 1629 013b 13       		.uleb128 0x13
 1630 013c 0B       		.uleb128 0xb
 1631 013d 01       		.byte	0x1
 1632 013e 11       		.uleb128 0x11
 1633 013f 01       		.uleb128 0x1
 1634 0140 12       		.uleb128 0x12
 1635 0141 06       		.uleb128 0x6
 1636 0142 00       		.byte	0
 1637 0143 00       		.byte	0
 1638 0144 14       		.uleb128 0x14
 1639 0145 34       		.uleb128 0x34
 1640 0146 00       		.byte	0
 1641 0147 03       		.uleb128 0x3
 1642 0148 0E       		.uleb128 0xe
 1643 0149 3A       		.uleb128 0x3a
 1644 014a 0B       		.uleb128 0xb
 1645 014b 3B       		.uleb128 0x3b
 1646 014c 0B       		.uleb128 0xb
 1647 014d 49       		.uleb128 0x49
 1648 014e 13       		.uleb128 0x13
 1649 014f 3F       		.uleb128 0x3f
 1650 0150 19       		.uleb128 0x19
 1651 0151 02       		.uleb128 0x2
 1652 0152 18       		.uleb128 0x18
 1653 0153 00       		.byte	0
 1654 0154 00       		.byte	0
 1655 0155 00       		.byte	0
 1656              		.section	.debug_aranges,"",%progbits
 1657 0000 9C000000 		.4byte	0x9c
 1658 0004 0200     		.2byte	0x2
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 58


 1659 0006 00000000 		.4byte	.Ldebug_info0
 1660 000a 04       		.byte	0x4
 1661 000b 00       		.byte	0
 1662 000c 0000     		.2byte	0
 1663 000e 0000     		.2byte	0
 1664 0010 00000000 		.4byte	.LFB0
 1665 0014 20000000 		.4byte	.LFE0-.LFB0
 1666 0018 00000000 		.4byte	.LFB1
 1667 001c 2C000000 		.4byte	.LFE1-.LFB1
 1668 0020 00000000 		.4byte	.LFB2
 1669 0024 34000000 		.4byte	.LFE2-.LFB2
 1670 0028 00000000 		.4byte	.LFB3
 1671 002c 34000000 		.4byte	.LFE3-.LFB3
 1672 0030 00000000 		.4byte	.LFB4
 1673 0034 10000000 		.4byte	.LFE4-.LFB4
 1674 0038 00000000 		.4byte	.LFB5
 1675 003c 14000000 		.4byte	.LFE5-.LFB5
 1676 0040 00000000 		.4byte	.LFB6
 1677 0044 20000000 		.4byte	.LFE6-.LFB6
 1678 0048 00000000 		.4byte	.LFB7
 1679 004c 2C000000 		.4byte	.LFE7-.LFB7
 1680 0050 00000000 		.4byte	.LFB8
 1681 0054 18000000 		.4byte	.LFE8-.LFB8
 1682 0058 00000000 		.4byte	.LFB9
 1683 005c 34000000 		.4byte	.LFE9-.LFB9
 1684 0060 00000000 		.4byte	.LFB10
 1685 0064 40000000 		.4byte	.LFE10-.LFB10
 1686 0068 00000000 		.4byte	.LFB11
 1687 006c 40000000 		.4byte	.LFE11-.LFB11
 1688 0070 00000000 		.4byte	.LFB12
 1689 0074 30000000 		.4byte	.LFE12-.LFB12
 1690 0078 00000000 		.4byte	.LFB13
 1691 007c 44000000 		.4byte	.LFE13-.LFB13
 1692 0080 00000000 		.4byte	.LFB14
 1693 0084 40000000 		.4byte	.LFE14-.LFB14
 1694 0088 00000000 		.4byte	.LFB15
 1695 008c 9C000000 		.4byte	.LFE15-.LFB15
 1696 0090 00000000 		.4byte	.LFB16
 1697 0094 14000000 		.4byte	.LFE16-.LFB16
 1698 0098 00000000 		.4byte	0
 1699 009c 00000000 		.4byte	0
 1700              		.section	.debug_ranges,"",%progbits
 1701              	.Ldebug_ranges0:
 1702 0000 00000000 		.4byte	.LFB0
 1703 0004 20000000 		.4byte	.LFE0
 1704 0008 00000000 		.4byte	.LFB1
 1705 000c 2C000000 		.4byte	.LFE1
 1706 0010 00000000 		.4byte	.LFB2
 1707 0014 34000000 		.4byte	.LFE2
 1708 0018 00000000 		.4byte	.LFB3
 1709 001c 34000000 		.4byte	.LFE3
 1710 0020 00000000 		.4byte	.LFB4
 1711 0024 10000000 		.4byte	.LFE4
 1712 0028 00000000 		.4byte	.LFB5
 1713 002c 14000000 		.4byte	.LFE5
 1714 0030 00000000 		.4byte	.LFB6
 1715 0034 20000000 		.4byte	.LFE6
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 59


 1716 0038 00000000 		.4byte	.LFB7
 1717 003c 2C000000 		.4byte	.LFE7
 1718 0040 00000000 		.4byte	.LFB8
 1719 0044 18000000 		.4byte	.LFE8
 1720 0048 00000000 		.4byte	.LFB9
 1721 004c 34000000 		.4byte	.LFE9
 1722 0050 00000000 		.4byte	.LFB10
 1723 0054 40000000 		.4byte	.LFE10
 1724 0058 00000000 		.4byte	.LFB11
 1725 005c 40000000 		.4byte	.LFE11
 1726 0060 00000000 		.4byte	.LFB12
 1727 0064 30000000 		.4byte	.LFE12
 1728 0068 00000000 		.4byte	.LFB13
 1729 006c 44000000 		.4byte	.LFE13
 1730 0070 00000000 		.4byte	.LFB14
 1731 0074 40000000 		.4byte	.LFE14
 1732 0078 00000000 		.4byte	.LFB15
 1733 007c 9C000000 		.4byte	.LFE15
 1734 0080 00000000 		.4byte	.LFB16
 1735 0084 14000000 		.4byte	.LFE16
 1736 0088 00000000 		.4byte	0
 1737 008c 00000000 		.4byte	0
 1738              		.section	.debug_line,"",%progbits
 1739              	.Ldebug_line0:
 1740 0000 F9010000 		.section	.debug_str,"MS",%progbits,1
 1740      02004100 
 1740      00000201 
 1740      FB0E0D00 
 1740      01010101 
 1741              	.LASF6:
 1742 0000 6C6F6E67 		.ascii	"long long int\000"
 1742      206C6F6E 
 1742      6720696E 
 1742      7400
 1743              	.LASF34:
 1744 000e 54785F50 		.ascii	"Tx_PutArray\000"
 1744      75744172 
 1744      72617900 
 1745              	.LASF39:
 1746 001a 54785F53 		.ascii	"Tx_SendBreak\000"
 1746      656E6442 
 1746      7265616B 
 1746      00
 1747              	.LASF42:
 1748 0027 74785065 		.ascii	"txPeriod\000"
 1748      72696F64 
 1748      00
 1749              	.LASF47:
 1750 0030 433A5C55 		.ascii	"C:\\Users\\Matthew Arbesfeld\\Documents\\PSoC Creat"
 1750      73657273 
 1750      5C4D6174 
 1750      74686577 
 1750      20417262 
 1751 005f 6F725C42 		.ascii	"or\\BoxesUART\\Boxes5.cydsn\000"
 1751      6F786573 
 1751      55415254 
 1751      5C426F78 
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 60


 1751      6573352E 
 1752              	.LASF46:
 1753 0079 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\Tx.c\000"
 1753      6E657261 
 1753      7465645F 
 1753      536F7572 
 1753      63655C50 
 1754              	.LASF19:
 1755 0097 54785F45 		.ascii	"Tx_Enable\000"
 1755      6E61626C 
 1755      6500
 1756              	.LASF3:
 1757 00a1 73686F72 		.ascii	"short unsigned int\000"
 1757      7420756E 
 1757      7369676E 
 1757      65642069 
 1757      6E7400
 1758              	.LASF12:
 1759 00b4 646F7562 		.ascii	"double\000"
 1759      6C6500
 1760              	.LASF43:
 1761 00bb 54785F53 		.ascii	"Tx_SetTxAddressMode\000"
 1761      65745478 
 1761      41646472 
 1761      6573734D 
 1761      6F646500 
 1762              	.LASF32:
 1763 00cf 73747269 		.ascii	"string\000"
 1763      6E6700
 1764              	.LASF38:
 1765 00d6 54785F43 		.ascii	"Tx_ClearTxBuffer\000"
 1765      6C656172 
 1765      54784275 
 1765      66666572 
 1765      00
 1766              	.LASF11:
 1767 00e7 666C6F61 		.ascii	"float\000"
 1767      7400
 1768              	.LASF44:
 1769 00ed 61646472 		.ascii	"addressMode\000"
 1769      6573734D 
 1769      6F646500 
 1770              	.LASF26:
 1771 00f9 54785F57 		.ascii	"Tx_WriteTxData\000"
 1771      72697465 
 1771      54784461 
 1771      746100
 1772              	.LASF15:
 1773 0108 72656738 		.ascii	"reg8\000"
 1773      00
 1774              	.LASF29:
 1775 010d 54785F52 		.ascii	"Tx_ReadTxStatus\000"
 1775      65616454 
 1775      78537461 
 1775      74757300 
 1776              	.LASF45:
 1777 011d 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 61


 1777      4320342E 
 1777      382E3420 
 1777      32303134 
 1777      30353236 
 1778 0150 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 1778      20726576 
 1778      6973696F 
 1778      6E203231 
 1778      31333538 
 1779 0183 30202D66 		.ascii	"0 -ffunction-sections\000"
 1779      66756E63 
 1779      74696F6E 
 1779      2D736563 
 1779      74696F6E 
 1780              	.LASF5:
 1781 0199 6C6F6E67 		.ascii	"long unsigned int\000"
 1781      20756E73 
 1781      69676E65 
 1781      6420696E 
 1781      7400
 1782              	.LASF9:
 1783 01ab 75696E74 		.ascii	"uint8\000"
 1783      3800
 1784              	.LASF24:
 1785 01b1 636F6E74 		.ascii	"control\000"
 1785      726F6C00 
 1786              	.LASF41:
 1787 01b9 746D7053 		.ascii	"tmpStat\000"
 1787      74617400 
 1788              	.LASF35:
 1789 01c1 62797465 		.ascii	"byteCount\000"
 1789      436F756E 
 1789      7400
 1790              	.LASF23:
 1791 01cb 54785F53 		.ascii	"Tx_SetTxInterruptMode\000"
 1791      65745478 
 1791      496E7465 
 1791      72727570 
 1791      744D6F64 
 1792              	.LASF1:
 1793 01e1 756E7369 		.ascii	"unsigned char\000"
 1793      676E6564 
 1793      20636861 
 1793      7200
 1794              	.LASF31:
 1795 01ef 54785F50 		.ascii	"Tx_PutString\000"
 1795      75745374 
 1795      72696E67 
 1795      00
 1796              	.LASF25:
 1797 01fc 696E7453 		.ascii	"intSrc\000"
 1797      726300
 1798              	.LASF49:
 1799 0203 54785F69 		.ascii	"Tx_initVar\000"
 1799      6E697456 
 1799      617200
 1800              	.LASF10:
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 62


 1801 020e 75696E74 		.ascii	"uint16\000"
 1801      313600
 1802              	.LASF8:
 1803 0215 756E7369 		.ascii	"unsigned int\000"
 1803      676E6564 
 1803      20696E74 
 1803      00
 1804              	.LASF37:
 1805 0222 73697A65 		.ascii	"size\000"
 1805      00
 1806              	.LASF7:
 1807 0227 6C6F6E67 		.ascii	"long long unsigned int\000"
 1807      206C6F6E 
 1807      6720756E 
 1807      7369676E 
 1807      65642069 
 1808              	.LASF18:
 1809 023e 54785F49 		.ascii	"Tx_Init\000"
 1809      6E697400 
 1810              	.LASF33:
 1811 0246 62756649 		.ascii	"bufIndex\000"
 1811      6E646578 
 1811      00
 1812              	.LASF48:
 1813 024f 54785F47 		.ascii	"Tx_GetTxBufferSize\000"
 1813      65745478 
 1813      42756666 
 1813      65725369 
 1813      7A6500
 1814              	.LASF16:
 1815 0262 73697A65 		.ascii	"sizetype\000"
 1815      74797065 
 1815      00
 1816              	.LASF13:
 1817 026b 63686172 		.ascii	"char8\000"
 1817      3800
 1818              	.LASF21:
 1819 0271 656E6162 		.ascii	"enableInterrupts\000"
 1819      6C65496E 
 1819      74657272 
 1819      75707473 
 1819      00
 1820              	.LASF27:
 1821 0282 74784461 		.ascii	"txDataByte\000"
 1821      74614279 
 1821      746500
 1822              	.LASF22:
 1823 028d 54785F57 		.ascii	"Tx_WriteControlRegister\000"
 1823      72697465 
 1823      436F6E74 
 1823      726F6C52 
 1823      65676973 
 1824              	.LASF14:
 1825 02a5 63686172 		.ascii	"char\000"
 1825      00
 1826              	.LASF17:
 1827 02aa 54785F53 		.ascii	"Tx_Start\000"
ARM GAS  C:\Users\MATTHE~1\AppData\Local\Temp\ccR4jaXk.s 			page 63


 1827      74617274 
 1827      00
 1828              	.LASF40:
 1829 02b3 7265744D 		.ascii	"retMode\000"
 1829      6F646500 
 1830              	.LASF28:
 1831 02bb 54785F52 		.ascii	"Tx_ReadControlRegister\000"
 1831      65616443 
 1831      6F6E7472 
 1831      6F6C5265 
 1831      67697374 
 1832              	.LASF2:
 1833 02d2 73686F72 		.ascii	"short int\000"
 1833      7420696E 
 1833      7400
 1834              	.LASF4:
 1835 02dc 6C6F6E67 		.ascii	"long int\000"
 1835      20696E74 
 1835      00
 1836              	.LASF0:
 1837 02e5 7369676E 		.ascii	"signed char\000"
 1837      65642063 
 1837      68617200 
 1838              	.LASF36:
 1839 02f1 54785F50 		.ascii	"Tx_PutCRLF\000"
 1839      75744352 
 1839      4C4600
 1840              	.LASF20:
 1841 02fc 54785F53 		.ascii	"Tx_Stop\000"
 1841      746F7000 
 1842              	.LASF30:
 1843 0304 54785F50 		.ascii	"Tx_PutChar\000"
 1843      75744368 
 1843      617200
 1844              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
